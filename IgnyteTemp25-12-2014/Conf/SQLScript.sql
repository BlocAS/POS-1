-- Developer's comment header
-- INVAdjustStockReason.sql
-- 
-- history:   12/26/2014 2:45:42 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@AdjustStockreasonName varchar (255)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVAdjustStockReason' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_Insert_WithDefaultValues]
@AdjustStockreasonName varchar (255) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVAdjustStockReason'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @AdjustStockreasonName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='AdjustStockreasonName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @AdjustStockreasonName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVAdjustStockReason]( [AdjustStockreasonName] )
          VALUES ( @AdjustStockreasonName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVAdjustStockReason_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@AdjustStockReasonID int = null  
		@AdjustStockreasonName varchar (255) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVAdjustStockReason' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_Insert_WithDefaultValues_AndReturn]
@AdjustStockReasonID int = null , 
@AdjustStockreasonName varchar (255) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVAdjustStockReason'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @AdjustStockreasonName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='AdjustStockreasonName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @AdjustStockreasonName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVAdjustStockReason]( [AdjustStockreasonName] )
OUTPUT Inserted.*
VALUES (   @AdjustStockreasonName  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@AdjustStockreasonName varchar (255)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVAdjustStockReason' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_Insert]
@AdjustStockreasonName varchar (255) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVAdjustStockReason]( [AdjustStockreasonName] )
          VALUES ( @AdjustStockreasonName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@AdjustStockReasonID int  
		@AdjustStockreasonName varchar (255)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVAdjustStockReason' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_Update]
@AdjustStockReasonID int , 
@AdjustStockreasonName varchar (255) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVAdjustStockReason]
SET
	[AdjustStockreasonName] = @AdjustStockreasonName
WHERE
[AdjustStockReasonID] = @AdjustStockReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@AdjustStockReasonID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVAdjustStockReason' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_Delete]
@AdjustStockReasonID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVAdjustStockReason]
WHERE
[AdjustStockReasonID] = @AdjustStockReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVAdjustStockReason'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVAdjustStockReason] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@AdjustStockReasonID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStockReason' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_SelectByPrimaryKey]
@AdjustStockReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[AdjustStockReasonID],[AdjustStockreasonName]
FROM	[dbo].[INVAdjustStockReason]
WHERE
	[AdjustStockReasonID] = @AdjustStockReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVAdjustStockReason' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[AdjustStockReasonID],[AdjustStockreasonName]
			FROM	[dbo].[INVAdjustStockReason]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVAdjustStockReason'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVAdjustStockReason_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[AdjustStockReasonID],[AdjustStockreasonName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVAdjustStockReason]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVAdjustStockReason' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [AdjustStockReasonID],[AdjustStockreasonName]
			FROM [dbo].[INVAdjustStockReason] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [AdjustStockReasonID],[AdjustStockreasonName]
			FROM [dbo].[INVAdjustStockReason] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVAdjustStockReason' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [AdjustStockReasonID],[AdjustStockreasonName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVAdjustStockReason] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [AdjustStockReasonID],[AdjustStockreasonName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVAdjustStockReason] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVAdjustStockReason' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVAdjustStockReason]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStockReason_SelectOneWithINVAdjustStockUsingAdjustReasonID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStockReason_SelectOneWithINVAdjustStockUsingAdjustReasonID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStockReason_SelectOneWithINVAdjustStockUsingAdjustReasonID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:41 AM

INPUTS	: 
		@AdjustStockReasonID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStockReason' and also the respective child records from 'INVAdjustStock'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStockReason_SelectOneWithINVAdjustStockUsingAdjustReasonID]
@AdjustStockReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_INVAdjustStockReason_SelectByPrimaryKey @AdjustStockReasonID = @AdjustStockReasonID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_INVAdjustStock_SelectAllByForeignKeyAdjustReasonID  @AdjustStockReasonID = @AdjustStockReasonID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





-- Developer's comment header
-- BDTaxType.sql
-- 
-- history:   12/26/2014 2:45:42 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@TaxTypeName varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDTaxType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_Insert_WithDefaultValues]
@TaxTypeName varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='BDTaxType'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @TaxTypeName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TaxTypeName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TaxTypeName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDTaxType]( [TaxTypeName] )
          VALUES ( @TaxTypeName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_BDTaxType_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@TaxTypeID int = null  
		@TaxTypeName varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDTaxType' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_Insert_WithDefaultValues_AndReturn]
@TaxTypeID int = null , 
@TaxTypeName varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='BDTaxType'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @TaxTypeName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TaxTypeName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TaxTypeName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[BDTaxType]( [TaxTypeName] )
OUTPUT Inserted.*
VALUES (   @TaxTypeName  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@TaxTypeName varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDTaxType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_Insert]
@TaxTypeName varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDTaxType]( [TaxTypeName] )
          VALUES ( @TaxTypeName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@TaxTypeID int  
		@TaxTypeName varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'BDTaxType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_Update]
@TaxTypeID int , 
@TaxTypeName varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[BDTaxType]
SET
	[TaxTypeName] = @TaxTypeName
WHERE
[TaxTypeID] = @TaxTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@TaxTypeID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'BDTaxType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_Delete]
@TaxTypeID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[BDTaxType]
WHERE
[TaxTypeID] = @TaxTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'BDTaxType'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[BDTaxType] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@TaxTypeID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDTaxType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_SelectByPrimaryKey]
@TaxTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[TaxTypeID],[TaxTypeName]
FROM	[dbo].[BDTaxType]
WHERE
	[TaxTypeID] = @TaxTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'BDTaxType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[TaxTypeID],[TaxTypeName]
			FROM	[dbo].[BDTaxType]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'BDTaxType'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_BDTaxType_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[TaxTypeID],[TaxTypeName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[BDTaxType]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'BDTaxType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [TaxTypeID],[TaxTypeName]
			FROM [dbo].[BDTaxType] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [TaxTypeID],[TaxTypeName]
			FROM [dbo].[BDTaxType] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'BDTaxType' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [TaxTypeID],[TaxTypeName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[BDTaxType] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [TaxTypeID],[TaxTypeName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[BDTaxType] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'BDTaxType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[BDTaxType]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_SelectOneWithPURPurchaseHeaderUsingTaxTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_SelectOneWithPURPurchaseHeaderUsingTaxTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_SelectOneWithPURPurchaseHeaderUsingTaxTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@TaxTypeID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDTaxType' and also the respective child records from 'PURPurchaseHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_SelectOneWithPURPurchaseHeaderUsingTaxTypeID]
@TaxTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_BDTaxType_SelectByPrimaryKey @TaxTypeID = @TaxTypeID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseHeader_SelectAllByForeignKeyTaxTypeID  @TaxTypeID = @TaxTypeID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDTaxType_SelectOneWithSALSalesHeaderUsingTaxTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDTaxType_SelectOneWithSALSalesHeaderUsingTaxTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDTaxType_SelectOneWithSALSalesHeaderUsingTaxTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@TaxTypeID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDTaxType' and also the respective child records from 'SALSalesHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDTaxType_SelectOneWithSALSalesHeaderUsingTaxTypeID]
@TaxTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_BDTaxType_SelectByPrimaryKey @TaxTypeID = @TaxTypeID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_SALSalesHeader_SelectAllByForeignKeyTaxTypeID  @TaxTypeID = @TaxTypeID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





-- Developer's comment header
-- BDSupplier.sql
-- 
-- history:   12/26/2014 2:45:42 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@SupplierCode varchar (50) = null  
		@SupplierName varchar (255)  
		@Address text = null  
		@Phone1 varchar (50) = null  
		@Phone2 varchar (50) = null  
		@Mobile1 varchar (50) = null  
		@Mobile2 varchar (50) = null  
		@Email varchar (50) = null  
		@IsActive bit = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDSupplier' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_Insert_WithDefaultValues]
@SupplierCode varchar (50) = null , 
@SupplierName varchar (255) , 
@Address text = null , 
@Phone1 varchar (50) = null , 
@Phone2 varchar (50) = null , 
@Mobile1 varchar (50) = null , 
@Mobile2 varchar (50) = null , 
@Email varchar (50) = null , 
@IsActive bit = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='BDSupplier'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @SupplierCode is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SupplierCode')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SupplierCode =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @SupplierName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SupplierName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SupplierName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Address is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Address')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Address =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Phone1 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Phone1')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Phone1 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Phone2 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='phone2')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Phone2 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Mobile1 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Mobile1')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Mobile1 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Mobile2 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Mobile2')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Mobile2 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Email is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Email')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Email =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsActive is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsActive')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsActive =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDSupplier]( [SupplierCode],[SupplierName],[Address],[Phone1],[phone2],[Mobile1],[Mobile2],[Email],[IsActive] )
          VALUES ( @SupplierCode,@SupplierName,@Address,@Phone1,@Phone2,@Mobile1,@Mobile2,@Email,@IsActive )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_BDSupplier_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@SupplierID int = null  
		@SupplierCode varchar (50) = null  
		@SupplierName varchar (255) = null  
		@Address text = null  
		@Phone1 varchar (50) = null  
		@Phone2 varchar (50) = null  
		@Mobile1 varchar (50) = null  
		@Mobile2 varchar (50) = null  
		@Email varchar (50) = null  
		@IsActive bit = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDSupplier' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_Insert_WithDefaultValues_AndReturn]
@SupplierID int = null , 
@SupplierCode varchar (50) = null , 
@SupplierName varchar (255) = null , 
@Address text = null , 
@Phone1 varchar (50) = null , 
@Phone2 varchar (50) = null , 
@Mobile1 varchar (50) = null , 
@Mobile2 varchar (50) = null , 
@Email varchar (50) = null , 
@IsActive bit = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='BDSupplier'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @SupplierCode is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SupplierCode')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SupplierCode =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @SupplierName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SupplierName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SupplierName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Address is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Address')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Address =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Phone1 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Phone1')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Phone1 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Phone2 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='phone2')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Phone2 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Mobile1 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Mobile1')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Mobile1 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Mobile2 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Mobile2')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Mobile2 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Email is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Email')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Email =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsActive is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsActive')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsActive =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[BDSupplier]( [SupplierCode],[SupplierName],[Address],[Phone1],[phone2],[Mobile1],[Mobile2],[Email],[IsActive] )
OUTPUT Inserted.*
VALUES (   @SupplierCode,@SupplierName,@Address,@Phone1,@Phone2,@Mobile1,@Mobile2,@Email,@IsActive  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@SupplierCode varchar (50) = null  
		@SupplierName varchar (255)  
		@Address text = null  
		@Phone1 varchar (50) = null  
		@Phone2 varchar (50) = null  
		@Mobile1 varchar (50) = null  
		@Mobile2 varchar (50) = null  
		@Email varchar (50) = null  
		@IsActive bit = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDSupplier' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_Insert]
@SupplierCode varchar (50) = null , 
@SupplierName varchar (255) , 
@Address text = null , 
@Phone1 varchar (50) = null , 
@Phone2 varchar (50) = null , 
@Mobile1 varchar (50) = null , 
@Mobile2 varchar (50) = null , 
@Email varchar (50) = null , 
@IsActive bit = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDSupplier]( [SupplierCode],[SupplierName],[Address],[Phone1],[phone2],[Mobile1],[Mobile2],[Email],[IsActive] )
          VALUES ( @SupplierCode,@SupplierName,@Address,@Phone1,@Phone2,@Mobile1,@Mobile2,@Email,@IsActive )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@SupplierID int  
		@SupplierCode varchar (50) = null  
		@SupplierName varchar (255)  
		@Address text = null  
		@Phone1 varchar (50) = null  
		@Phone2 varchar (50) = null  
		@Mobile1 varchar (50) = null  
		@Mobile2 varchar (50) = null  
		@Email varchar (50) = null  
		@IsActive bit = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'BDSupplier' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_Update]
@SupplierID int , 
@SupplierCode varchar (50) = null , 
@SupplierName varchar (255) , 
@Address text = null , 
@Phone1 varchar (50) = null , 
@Phone2 varchar (50) = null , 
@Mobile1 varchar (50) = null , 
@Mobile2 varchar (50) = null , 
@Email varchar (50) = null , 
@IsActive bit = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[BDSupplier]
SET
	[SupplierCode] = @SupplierCode ,
	[SupplierName] = @SupplierName ,
	[Address] = @Address ,
	[Phone1] = @Phone1 ,
	[phone2] = @Phone2 ,
	[Mobile1] = @Mobile1 ,
	[Mobile2] = @Mobile2 ,
	[Email] = @Email ,
	[IsActive] = @IsActive
WHERE
[SupplierID] = @SupplierID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@SupplierID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'BDSupplier' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_Delete]
@SupplierID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[BDSupplier]
WHERE
[SupplierID] = @SupplierID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'BDSupplier'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[BDSupplier] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@SupplierID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDSupplier' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_SelectByPrimaryKey]
@SupplierID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SupplierID],[SupplierCode],[SupplierName],[Address],[Phone1],[phone2],[Mobile1],[Mobile2],[Email],[IsActive]
FROM	[dbo].[BDSupplier]
WHERE
	[SupplierID] = @SupplierID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'BDSupplier' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[SupplierID],[SupplierCode],[SupplierName],[Address],[Phone1],[phone2],[Mobile1],[Mobile2],[Email],[IsActive]
			FROM	[dbo].[BDSupplier]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'BDSupplier'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_BDSupplier_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[SupplierID],[SupplierCode],[SupplierName],[Address],[Phone1],[phone2],[Mobile1],[Mobile2],[Email],[IsActive], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[BDSupplier]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'BDSupplier' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [SupplierID],[SupplierCode],[SupplierName],[Address],[Phone1],[phone2],[Mobile1],[Mobile2],[Email],[IsActive]
			FROM [dbo].[BDSupplier] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [SupplierID],[SupplierCode],[SupplierName],[Address],[Phone1],[phone2],[Mobile1],[Mobile2],[Email],[IsActive]
			FROM [dbo].[BDSupplier] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'BDSupplier' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [SupplierID],[SupplierCode],[SupplierName],[Address],[Phone1],[phone2],[Mobile1],[Mobile2],[Email],[IsActive], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[BDSupplier] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [SupplierID],[SupplierCode],[SupplierName],[Address],[Phone1],[phone2],[Mobile1],[Mobile2],[Email],[IsActive], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[BDSupplier] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'BDSupplier' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[BDSupplier]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDSupplier_SelectOneWithPURPurchaseHeaderUsingSupplierID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDSupplier_SelectOneWithPURPurchaseHeaderUsingSupplierID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDSupplier_SelectOneWithPURPurchaseHeaderUsingSupplierID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@SupplierID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDSupplier' and also the respective child records from 'PURPurchaseHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDSupplier_SelectOneWithPURPurchaseHeaderUsingSupplierID]
@SupplierID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_BDSupplier_SelectByPrimaryKey @SupplierID = @SupplierID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseHeader_SelectAllByForeignKeySupplierID  @SupplierID = @SupplierID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





-- Developer's comment header
-- BDRefuseReason.sql
-- 
-- history:   12/26/2014 2:45:42 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@RefuseReasonName varchar (255)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDRefuseReason' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_Insert_WithDefaultValues]
@RefuseReasonName varchar (255) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='BDRefuseReason'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @RefuseReasonName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RefuseReasonName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RefuseReasonName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDRefuseReason]( [RefuseReasonName] )
          VALUES ( @RefuseReasonName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_BDRefuseReason_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@RefuseReasonID int = null  
		@RefuseReasonName varchar (255) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDRefuseReason' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_Insert_WithDefaultValues_AndReturn]
@RefuseReasonID int = null , 
@RefuseReasonName varchar (255) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='BDRefuseReason'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @RefuseReasonName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RefuseReasonName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RefuseReasonName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[BDRefuseReason]( [RefuseReasonName] )
OUTPUT Inserted.*
VALUES (   @RefuseReasonName  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@RefuseReasonName varchar (255)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDRefuseReason' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_Insert]
@RefuseReasonName varchar (255) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDRefuseReason]( [RefuseReasonName] )
          VALUES ( @RefuseReasonName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@RefuseReasonID int  
		@RefuseReasonName varchar (255)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'BDRefuseReason' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_Update]
@RefuseReasonID int , 
@RefuseReasonName varchar (255) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[BDRefuseReason]
SET
	[RefuseReasonName] = @RefuseReasonName
WHERE
[RefuseReasonID] = @RefuseReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@RefuseReasonID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'BDRefuseReason' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_Delete]
@RefuseReasonID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[BDRefuseReason]
WHERE
[RefuseReasonID] = @RefuseReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'BDRefuseReason'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[BDRefuseReason] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@RefuseReasonID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDRefuseReason' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_SelectByPrimaryKey]
@RefuseReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[RefuseReasonID],[RefuseReasonName]
FROM	[dbo].[BDRefuseReason]
WHERE
	[RefuseReasonID] = @RefuseReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'BDRefuseReason' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[RefuseReasonID],[RefuseReasonName]
			FROM	[dbo].[BDRefuseReason]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'BDRefuseReason'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_BDRefuseReason_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[RefuseReasonID],[RefuseReasonName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[BDRefuseReason]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'BDRefuseReason' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [RefuseReasonID],[RefuseReasonName]
			FROM [dbo].[BDRefuseReason] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [RefuseReasonID],[RefuseReasonName]
			FROM [dbo].[BDRefuseReason] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'BDRefuseReason' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [RefuseReasonID],[RefuseReasonName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[BDRefuseReason] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [RefuseReasonID],[RefuseReasonName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[BDRefuseReason] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'BDRefuseReason' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[BDRefuseReason]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_SelectOneWithPURPurchaseHeaderUsingRefuseReasonID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_SelectOneWithPURPurchaseHeaderUsingRefuseReasonID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_SelectOneWithPURPurchaseHeaderUsingRefuseReasonID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@RefuseReasonID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDRefuseReason' and also the respective child records from 'PURPurchaseHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_SelectOneWithPURPurchaseHeaderUsingRefuseReasonID]
@RefuseReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_BDRefuseReason_SelectByPrimaryKey @RefuseReasonID = @RefuseReasonID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseHeader_SelectAllByForeignKeyRefuseReasonID  @RefuseReasonID = @RefuseReasonID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDRefuseReason_SelectOneWithSALSalesHeaderUsingRefuseReasonID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDRefuseReason_SelectOneWithSALSalesHeaderUsingRefuseReasonID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDRefuseReason_SelectOneWithSALSalesHeaderUsingRefuseReasonID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@RefuseReasonID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDRefuseReason' and also the respective child records from 'SALSalesHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDRefuseReason_SelectOneWithSALSalesHeaderUsingRefuseReasonID]
@RefuseReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_BDRefuseReason_SelectByPrimaryKey @RefuseReasonID = @RefuseReasonID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_SALSalesHeader_SelectAllByForeignKeyRefuseReasonID  @RefuseReasonID = @RefuseReasonID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





-- Developer's comment header
-- BDProductGroup.sql
-- 
-- history:   12/26/2014 2:45:42 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@ProductGroupName varchar (50)  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDProductGroup' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_Insert_WithDefaultValues]
@ProductGroupName varchar (50) , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='BDProductGroup'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ProductGroupName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductGroupName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductGroupName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Notes is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Notes')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Notes =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDProductGroup]( [ProductGroupName],[Notes] )
          VALUES ( @ProductGroupName,@Notes )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_BDProductGroup_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@ProductGroupID int = null  
		@ProductGroupName varchar (50) = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDProductGroup' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_Insert_WithDefaultValues_AndReturn]
@ProductGroupID int = null , 
@ProductGroupName varchar (50) = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='BDProductGroup'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ProductGroupName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductGroupName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductGroupName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Notes is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Notes')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Notes =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[BDProductGroup]( [ProductGroupName],[Notes] )
OUTPUT Inserted.*
VALUES (   @ProductGroupName,@Notes  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@ProductGroupName varchar (50)  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDProductGroup' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_Insert]
@ProductGroupName varchar (50) , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDProductGroup]( [ProductGroupName],[Notes] )
          VALUES ( @ProductGroupName,@Notes )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@ProductGroupID int  
		@ProductGroupName varchar (50)  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'BDProductGroup' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_Update]
@ProductGroupID int , 
@ProductGroupName varchar (50) , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[BDProductGroup]
SET
	[ProductGroupName] = @ProductGroupName ,
	[Notes] = @Notes
WHERE
[ProductGroupID] = @ProductGroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@ProductGroupID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'BDProductGroup' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_Delete]
@ProductGroupID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[BDProductGroup]
WHERE
[ProductGroupID] = @ProductGroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'BDProductGroup'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[BDProductGroup] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@ProductGroupID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProductGroup' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_SelectByPrimaryKey]
@ProductGroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[ProductGroupID],[ProductGroupName],[Notes]
FROM	[dbo].[BDProductGroup]
WHERE
	[ProductGroupID] = @ProductGroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'BDProductGroup' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[ProductGroupID],[ProductGroupName],[Notes]
			FROM	[dbo].[BDProductGroup]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'BDProductGroup'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_BDProductGroup_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[ProductGroupID],[ProductGroupName],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[BDProductGroup]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'BDProductGroup' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [ProductGroupID],[ProductGroupName],[Notes]
			FROM [dbo].[BDProductGroup] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [ProductGroupID],[ProductGroupName],[Notes]
			FROM [dbo].[BDProductGroup] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'BDProductGroup' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [ProductGroupID],[ProductGroupName],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[BDProductGroup] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [ProductGroupID],[ProductGroupName],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[BDProductGroup] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'BDProductGroup' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[BDProductGroup]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_SelectOneWithBDProductUsingProductGroupID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_SelectOneWithBDProductUsingProductGroupID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_SelectOneWithBDProductUsingProductGroupID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@ProductGroupID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProductGroup' and also the respective child records from 'BDProduct'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_SelectOneWithBDProductUsingProductGroupID]
@ProductGroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_BDProductGroup_SelectByPrimaryKey @ProductGroupID = @ProductGroupID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_BDProduct_SelectAllByForeignKeyProductGroupID  @ProductGroupID = @ProductGroupID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProductGroup_SelectOneWithBDProductUsingProductGroupID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProductGroup_SelectOneWithBDProductUsingProductGroupID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProductGroup_SelectOneWithBDProductUsingProductGroupID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@ProductGroupID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProductGroup' and also the respective child records from 'BDProduct'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProductGroup_SelectOneWithBDProductUsingProductGroupID]
@ProductGroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_BDProductGroup_SelectByPrimaryKey @ProductGroupID = @ProductGroupID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_BDProduct_SelectAllByForeignKeyProductGroupID  @ProductGroupID = @ProductGroupID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





-- Developer's comment header
-- PaymentType.sql
-- 
-- history:   12/26/2014 2:45:43 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PaymentTypeID int  
		@PaymentTypeName varchar (50)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PaymentType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_Insert_WithDefaultValues]
@PaymentTypeID int , 
@PaymentTypeName varchar (50) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='PaymentType'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @PaymentTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaymentTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaymentTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @PaymentTypeName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaymentTypeName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaymentTypeName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[PaymentType]( [PaymentTypeID],[PaymentTypeName] )
          VALUES ( @PaymentTypeID,@PaymentTypeName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_PaymentType_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PaymentTypeID int = null  
		@PaymentTypeName varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PaymentType' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_Insert_WithDefaultValues_AndReturn]
@PaymentTypeID int = null , 
@PaymentTypeName varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='PaymentType'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @PaymentTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaymentTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaymentTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @PaymentTypeName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaymentTypeName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaymentTypeName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[PaymentType]( [PaymentTypeID],[PaymentTypeName] )
OUTPUT Inserted.*
VALUES (   @PaymentTypeID,@PaymentTypeName  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PaymentTypeID int  
		@PaymentTypeName varchar (50)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PaymentType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_Insert]
@PaymentTypeID int , 
@PaymentTypeName varchar (50) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[PaymentType]( [PaymentTypeID],[PaymentTypeName] )
          VALUES ( @PaymentTypeID,@PaymentTypeName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PaymentTypeID int  
		@PaymentTypeName varchar (50)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'PaymentType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_Update]
@PaymentTypeID int , 
@PaymentTypeName varchar (50) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[PaymentType]
SET
	[PaymentTypeName] = @PaymentTypeName
WHERE
[PaymentTypeID] = @PaymentTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PaymentTypeID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'PaymentType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_Delete]
@PaymentTypeID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[PaymentType]
WHERE
[PaymentTypeID] = @PaymentTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'PaymentType'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[PaymentType] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PaymentTypeID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PaymentType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_SelectByPrimaryKey]
@PaymentTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PaymentTypeID],[PaymentTypeName]
FROM	[dbo].[PaymentType]
WHERE
	[PaymentTypeID] = @PaymentTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'PaymentType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[PaymentTypeID],[PaymentTypeName]
			FROM	[dbo].[PaymentType]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:42 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'PaymentType'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_PaymentType_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[PaymentTypeID],[PaymentTypeName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[PaymentType]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'PaymentType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [PaymentTypeID],[PaymentTypeName]
			FROM [dbo].[PaymentType] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [PaymentTypeID],[PaymentTypeName]
			FROM [dbo].[PaymentType] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'PaymentType' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [PaymentTypeID],[PaymentTypeName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[PaymentType] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [PaymentTypeID],[PaymentTypeName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[PaymentType] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'PaymentType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[PaymentType]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_SelectOneWithPURPurchaseHeaderUsingPaymentTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_SelectOneWithPURPurchaseHeaderUsingPaymentTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_SelectOneWithPURPurchaseHeaderUsingPaymentTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@PaymentTypeID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PaymentType' and also the respective child records from 'PURPurchaseHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_SelectOneWithPURPurchaseHeaderUsingPaymentTypeID]
@PaymentTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_PaymentType_SelectByPrimaryKey @PaymentTypeID = @PaymentTypeID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseHeader_SelectAllByForeignKeyPaymentTypeID  @PaymentTypeID = @PaymentTypeID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PaymentType_SelectOneWithSALSalesHeaderUsingPaymentTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PaymentType_SelectOneWithSALSalesHeaderUsingPaymentTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PaymentType_SelectOneWithSALSalesHeaderUsingPaymentTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@PaymentTypeID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PaymentType' and also the respective child records from 'SALSalesHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PaymentType_SelectOneWithSALSalesHeaderUsingPaymentTypeID]
@PaymentTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_PaymentType_SelectByPrimaryKey @PaymentTypeID = @PaymentTypeID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_SALSalesHeader_SelectAllByForeignKeyPaymentTypeID  @PaymentTypeID = @PaymentTypeID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





-- Developer's comment header
-- INVTransferHeader.sql
-- 
-- history:   12/26/2014 2:45:43 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@TransferDate datetime  
		@FromInventoryID int  
		@ToInventoryID int  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeletedDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTransferHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_Insert_WithDefaultValues]
@TransferDate datetime , 
@FromInventoryID int , 
@ToInventoryID int , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeletedDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVTransferHeader'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @TransferDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TransferDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TransferDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @FromInventoryID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='FromInventoryID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @FromInventoryID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ToInventoryID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ToInventoryID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ToInventoryID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVTransferHeader]( [TransferDate],[FromInventoryID],[ToInventoryID],[CreatedBy],[CreateDate],[UpdatedBy],[IsDeleted],[DeletedBy],[DeletedDate] )
          VALUES ( @TransferDate,@FromInventoryID,@ToInventoryID,@CreatedBy,@CreateDate,@UpdatedBy,@IsDeleted,@DeletedBy,@DeletedDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVTransferHeader_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@INVTransferHeaderID int = null  
		@TransferDate datetime = null  
		@FromInventoryID int = null  
		@ToInventoryID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit = null  
		@DeletedBy int = null  
		@DeletedDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTransferHeader' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_Insert_WithDefaultValues_AndReturn]
@INVTransferHeaderID int = null , 
@TransferDate datetime = null , 
@FromInventoryID int = null , 
@ToInventoryID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit = null , 
@DeletedBy int = null , 
@DeletedDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVTransferHeader'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @TransferDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TransferDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TransferDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @FromInventoryID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='FromInventoryID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @FromInventoryID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ToInventoryID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ToInventoryID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ToInventoryID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVTransferHeader]( [TransferDate],[FromInventoryID],[ToInventoryID],[CreatedBy],[CreateDate],[UpdatedBy],[IsDeleted],[DeletedBy],[DeletedDate] )
OUTPUT Inserted.*
VALUES (   @TransferDate,@FromInventoryID,@ToInventoryID,@CreatedBy,@CreateDate,@UpdatedBy,@IsDeleted,@DeletedBy,@DeletedDate  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@TransferDate datetime  
		@FromInventoryID int  
		@ToInventoryID int  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeletedDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTransferHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_Insert]
@TransferDate datetime , 
@FromInventoryID int , 
@ToInventoryID int , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeletedDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVTransferHeader]( [TransferDate],[FromInventoryID],[ToInventoryID],[CreatedBy],[CreateDate],[UpdatedBy],[IsDeleted],[DeletedBy],[DeletedDate] )
          VALUES ( @TransferDate,@FromInventoryID,@ToInventoryID,@CreatedBy,@CreateDate,@UpdatedBy,@IsDeleted,@DeletedBy,@DeletedDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@INVTransferHeaderID int  
		@TransferDate datetime  
		@FromInventoryID int  
		@ToInventoryID int  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeletedDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVTransferHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_Update]
@INVTransferHeaderID int , 
@TransferDate datetime , 
@FromInventoryID int , 
@ToInventoryID int , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeletedDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVTransferHeader]
SET
	[TransferDate] = @TransferDate ,
	[FromInventoryID] = @FromInventoryID ,
	[ToInventoryID] = @ToInventoryID ,
	[CreatedBy] = @CreatedBy ,
	[CreateDate] = @CreateDate ,
	[UpdatedBy] = @UpdatedBy ,
	[IsDeleted] = @IsDeleted ,
	[DeletedBy] = @DeletedBy ,
	[DeletedDate] = @DeletedDate
WHERE
[INVTransferHeaderID] = @INVTransferHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@INVTransferHeaderID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVTransferHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_Delete]
@INVTransferHeaderID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVTransferHeader]
WHERE
[INVTransferHeaderID] = @INVTransferHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVTransferHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVTransferHeader] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@INVTransferHeaderID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVTransferHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_SelectByPrimaryKey]
@INVTransferHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[INVTransferHeaderID],[TransferDate],[FromInventoryID],[ToInventoryID],[CreatedBy],[CreateDate],[UpdatedBy],[IsDeleted],[DeletedBy],[DeletedDate]
FROM	[dbo].[INVTransferHeader]
WHERE
	[INVTransferHeaderID] = @INVTransferHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVTransferHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[INVTransferHeaderID],[TransferDate],[FromInventoryID],[ToInventoryID],[CreatedBy],[CreateDate],[UpdatedBy],[IsDeleted],[DeletedBy],[DeletedDate]
			FROM	[dbo].[INVTransferHeader]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVTransferHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVTransferHeader_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[INVTransferHeaderID],[TransferDate],[FromInventoryID],[ToInventoryID],[CreatedBy],[CreateDate],[UpdatedBy],[IsDeleted],[DeletedBy],[DeletedDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVTransferHeader]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVTransferHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [INVTransferHeaderID],[TransferDate],[FromInventoryID],[ToInventoryID],[CreatedBy],[CreateDate],[UpdatedBy],[IsDeleted],[DeletedBy],[DeletedDate]
			FROM [dbo].[INVTransferHeader] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [INVTransferHeaderID],[TransferDate],[FromInventoryID],[ToInventoryID],[CreatedBy],[CreateDate],[UpdatedBy],[IsDeleted],[DeletedBy],[DeletedDate]
			FROM [dbo].[INVTransferHeader] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVTransferHeader' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [INVTransferHeaderID],[TransferDate],[FromInventoryID],[ToInventoryID],[CreatedBy],[CreateDate],[UpdatedBy],[IsDeleted],[DeletedBy],[DeletedDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVTransferHeader] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [INVTransferHeaderID],[TransferDate],[FromInventoryID],[ToInventoryID],[CreatedBy],[CreateDate],[UpdatedBy],[IsDeleted],[DeletedBy],[DeletedDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVTransferHeader] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTransferHeader_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTransferHeader_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTransferHeader_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVTransferHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTransferHeader_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVTransferHeader]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				






-- Developer's comment header
-- INVTakingInventoryLine.sql
-- 
-- history:   12/26/2014 2:45:43 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@TakingHeaderID int  
		@ProductID int  
		@ActualQty float  
		@ExpectedQty float  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTakingInventoryLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_Insert_WithDefaultValues]
@TakingHeaderID int , 
@ProductID int , 
@ActualQty float , 
@ExpectedQty float , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVTakingInventoryLine'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @TakingHeaderID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TakingHeaderID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TakingHeaderID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ActualQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ActualQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ActualQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ExpectedQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ExpectedQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ExpectedQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVTakingInventoryLine]( [TakingHeaderID],[ProductID],[ActualQty],[ExpectedQty],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
          VALUES ( @TakingHeaderID,@ProductID,@ActualQty,@ExpectedQty,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVTakingInventoryLine_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@TakingLineID int = null  
		@TakingHeaderID int = null  
		@ProductID int = null  
		@ActualQty float = null  
		@ExpectedQty float = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit = null  
		@DeletedBy int = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTakingInventoryLine' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_Insert_WithDefaultValues_AndReturn]
@TakingLineID int = null , 
@TakingHeaderID int = null , 
@ProductID int = null , 
@ActualQty float = null , 
@ExpectedQty float = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit = null , 
@DeletedBy int = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVTakingInventoryLine'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @TakingHeaderID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TakingHeaderID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TakingHeaderID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ActualQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ActualQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ActualQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ExpectedQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ExpectedQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ExpectedQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVTakingInventoryLine]( [TakingHeaderID],[ProductID],[ActualQty],[ExpectedQty],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
OUTPUT Inserted.*
VALUES (   @TakingHeaderID,@ProductID,@ActualQty,@ExpectedQty,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@TakingHeaderID int  
		@ProductID int  
		@ActualQty float  
		@ExpectedQty float  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTakingInventoryLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_Insert]
@TakingHeaderID int , 
@ProductID int , 
@ActualQty float , 
@ExpectedQty float , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVTakingInventoryLine]( [TakingHeaderID],[ProductID],[ActualQty],[ExpectedQty],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
          VALUES ( @TakingHeaderID,@ProductID,@ActualQty,@ExpectedQty,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@TakingLineID int  
		@TakingHeaderID int  
		@ProductID int  
		@ActualQty float  
		@ExpectedQty float  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVTakingInventoryLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_Update]
@TakingLineID int , 
@TakingHeaderID int , 
@ProductID int , 
@ActualQty float , 
@ExpectedQty float , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVTakingInventoryLine]
SET
	[TakingHeaderID] = @TakingHeaderID ,
	[ProductID] = @ProductID ,
	[ActualQty] = @ActualQty ,
	[ExpectedQty] = @ExpectedQty ,
	[CreatedBy] = @CreatedBy ,
	[CreateDate] = @CreateDate ,
	[UpdatedBy] = @UpdatedBy ,
	[UpdateDate] = @UpdateDate ,
	[IsDeleted] = @IsDeleted ,
	[DeletedBy] = @DeletedBy ,
	[DeleteDate] = @DeleteDate
WHERE
[TakingLineID] = @TakingLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@TakingLineID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVTakingInventoryLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_Delete]
@TakingLineID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVTakingInventoryLine]
WHERE
[TakingLineID] = @TakingLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVTakingInventoryLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVTakingInventoryLine] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@TakingLineID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVTakingInventoryLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_SelectByPrimaryKey]
@TakingLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[TakingLineID],[TakingHeaderID],[ProductID],[ActualQty],[ExpectedQty],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
FROM	[dbo].[INVTakingInventoryLine]
WHERE
	[TakingLineID] = @TakingLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVTakingInventoryLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[TakingLineID],[TakingHeaderID],[ProductID],[ActualQty],[ExpectedQty],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM	[dbo].[INVTakingInventoryLine]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVTakingInventoryLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVTakingInventoryLine_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[TakingLineID],[TakingHeaderID],[ProductID],[ActualQty],[ExpectedQty],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVTakingInventoryLine]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVTakingInventoryLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [TakingLineID],[TakingHeaderID],[ProductID],[ActualQty],[ExpectedQty],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM [dbo].[INVTakingInventoryLine] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [TakingLineID],[TakingHeaderID],[ProductID],[ActualQty],[ExpectedQty],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM [dbo].[INVTakingInventoryLine] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVTakingInventoryLine' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [TakingLineID],[TakingHeaderID],[ProductID],[ActualQty],[ExpectedQty],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVTakingInventoryLine] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [TakingLineID],[TakingHeaderID],[ProductID],[ActualQty],[ExpectedQty],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVTakingInventoryLine] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLine_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLine_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLine_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:43 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVTakingInventoryLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLine_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVTakingInventoryLine]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				






-- Developer's comment header
-- INVTakingInventory.sql
-- 
-- history:   12/26/2014 2:45:44 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@TakingDate datetime  
		@TakingName varchar (50)  
		@CreatedBy int = null  
		@CreatedDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeletedDate datetime = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTakingInventory' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_Insert_WithDefaultValues]
@TakingDate datetime , 
@TakingName varchar (50) , 
@CreatedBy int = null , 
@CreatedDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeletedDate datetime = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVTakingInventory'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @TakingDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TakingDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TakingDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TakingName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TakingName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TakingName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Notes is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Notes')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Notes =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVTakingInventory]( [TakingDate],[TakingName],[CreatedBy],[CreatedDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletedDate],[Notes] )
          VALUES ( @TakingDate,@TakingName,@CreatedBy,@CreatedDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeletedDate,@Notes )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVTakingInventory_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@TakingHeaderID int = null  
		@TakingDate datetime = null  
		@TakingName varchar (50) = null  
		@CreatedBy int = null  
		@CreatedDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit = null  
		@DeletedBy int = null  
		@DeletedDate datetime = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTakingInventory' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_Insert_WithDefaultValues_AndReturn]
@TakingHeaderID int = null , 
@TakingDate datetime = null , 
@TakingName varchar (50) = null , 
@CreatedBy int = null , 
@CreatedDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit = null , 
@DeletedBy int = null , 
@DeletedDate datetime = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVTakingInventory'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @TakingDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TakingDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TakingDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TakingName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TakingName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TakingName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Notes is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Notes')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Notes =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVTakingInventory]( [TakingDate],[TakingName],[CreatedBy],[CreatedDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletedDate],[Notes] )
OUTPUT Inserted.*
VALUES (   @TakingDate,@TakingName,@CreatedBy,@CreatedDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeletedDate,@Notes  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@TakingDate datetime  
		@TakingName varchar (50)  
		@CreatedBy int = null  
		@CreatedDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeletedDate datetime = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTakingInventory' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_Insert]
@TakingDate datetime , 
@TakingName varchar (50) , 
@CreatedBy int = null , 
@CreatedDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeletedDate datetime = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVTakingInventory]( [TakingDate],[TakingName],[CreatedBy],[CreatedDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletedDate],[Notes] )
          VALUES ( @TakingDate,@TakingName,@CreatedBy,@CreatedDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeletedDate,@Notes )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@TakingHeaderID int  
		@TakingDate datetime  
		@TakingName varchar (50)  
		@CreatedBy int = null  
		@CreatedDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeletedDate datetime = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVTakingInventory' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_Update]
@TakingHeaderID int , 
@TakingDate datetime , 
@TakingName varchar (50) , 
@CreatedBy int = null , 
@CreatedDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeletedDate datetime = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVTakingInventory]
SET
	[TakingDate] = @TakingDate ,
	[TakingName] = @TakingName ,
	[CreatedBy] = @CreatedBy ,
	[CreatedDate] = @CreatedDate ,
	[UpdatedBy] = @UpdatedBy ,
	[UpdateDate] = @UpdateDate ,
	[IsDeleted] = @IsDeleted ,
	[DeletedBy] = @DeletedBy ,
	[DeletedDate] = @DeletedDate ,
	[Notes] = @Notes
WHERE
[TakingHeaderID] = @TakingHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@TakingHeaderID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVTakingInventory' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_Delete]
@TakingHeaderID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVTakingInventory]
WHERE
[TakingHeaderID] = @TakingHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVTakingInventory'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVTakingInventory] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@TakingHeaderID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVTakingInventory' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_SelectByPrimaryKey]
@TakingHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[TakingHeaderID],[TakingDate],[TakingName],[CreatedBy],[CreatedDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletedDate],[Notes]
FROM	[dbo].[INVTakingInventory]
WHERE
	[TakingHeaderID] = @TakingHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVTakingInventory' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[TakingHeaderID],[TakingDate],[TakingName],[CreatedBy],[CreatedDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletedDate],[Notes]
			FROM	[dbo].[INVTakingInventory]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVTakingInventory'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVTakingInventory_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[TakingHeaderID],[TakingDate],[TakingName],[CreatedBy],[CreatedDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletedDate],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVTakingInventory]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVTakingInventory' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [TakingHeaderID],[TakingDate],[TakingName],[CreatedBy],[CreatedDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletedDate],[Notes]
			FROM [dbo].[INVTakingInventory] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [TakingHeaderID],[TakingDate],[TakingName],[CreatedBy],[CreatedDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletedDate],[Notes]
			FROM [dbo].[INVTakingInventory] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVTakingInventory' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [TakingHeaderID],[TakingDate],[TakingName],[CreatedBy],[CreatedDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletedDate],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVTakingInventory] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [TakingHeaderID],[TakingDate],[TakingName],[CreatedBy],[CreatedDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletedDate],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVTakingInventory] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventory_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventory_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventory_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVTakingInventory' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventory_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVTakingInventory]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				






-- Developer's comment header
-- INVStockType.sql
-- 
-- history:   12/26/2014 2:45:44 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@StockTypeName varchar (255)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVStockType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_Insert_WithDefaultValues]
@StockTypeName varchar (255) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVStockType'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @StockTypeName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='StockTypeName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @StockTypeName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVStockType]( [StockTypeName] )
          VALUES ( @StockTypeName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVStockType_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@StockTypeID int = null  
		@StockTypeName varchar (255) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVStockType' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_Insert_WithDefaultValues_AndReturn]
@StockTypeID int = null , 
@StockTypeName varchar (255) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVStockType'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @StockTypeName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='StockTypeName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @StockTypeName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVStockType]( [StockTypeName] )
OUTPUT Inserted.*
VALUES (   @StockTypeName  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@StockTypeName varchar (255)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVStockType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_Insert]
@StockTypeName varchar (255) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVStockType]( [StockTypeName] )
          VALUES ( @StockTypeName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@StockTypeID int  
		@StockTypeName varchar (255)  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVStockType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_Update]
@StockTypeID int , 
@StockTypeName varchar (255) , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVStockType]
SET
	[StockTypeName] = @StockTypeName
WHERE
[StockTypeID] = @StockTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@StockTypeID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVStockType' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_Delete]
@StockTypeID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVStockType]
WHERE
[StockTypeID] = @StockTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVStockType'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVStockType] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@StockTypeID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVStockType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_SelectByPrimaryKey]
@StockTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[StockTypeID],[StockTypeName]
FROM	[dbo].[INVStockType]
WHERE
	[StockTypeID] = @StockTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVStockType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[StockTypeID],[StockTypeName]
			FROM	[dbo].[INVStockType]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVStockType'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVStockType_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[StockTypeID],[StockTypeName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVStockType]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVStockType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [StockTypeID],[StockTypeName]
			FROM [dbo].[INVStockType] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [StockTypeID],[StockTypeName]
			FROM [dbo].[INVStockType] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVStockType' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [StockTypeID],[StockTypeName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVStockType] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [StockTypeID],[StockTypeName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVStockType] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVStockType' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVStockType]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVStockType_SelectOneWithINVProductStockUsingStockTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVStockType_SelectOneWithINVProductStockUsingStockTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVStockType_SelectOneWithINVProductStockUsingStockTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@StockTypeID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVStockType' and also the respective child records from 'INVProductStock'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVStockType_SelectOneWithINVProductStockUsingStockTypeID]
@StockTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_INVStockType_SelectByPrimaryKey @StockTypeID = @StockTypeID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_INVProductStock_SelectAllByForeignKeyStockTypeID  @StockTypeID = @StockTypeID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





-- Developer's comment header
-- BDCustomer.sql
-- 
-- history:   12/26/2014 2:45:44 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@CustomerName varchar (50)  
		@CustomerCode varchar (50) = null  
		@Address text = null  
		@Phone1 varchar (50) = null  
		@Phone2 varchar (50) = null  
		@Mobile1 varchar (50) = null  
		@Mobile2 varchar (50) = null  
		@Email varchar (50) = null  
		@IsActive bit = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDCustomer' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_Insert_WithDefaultValues]
@CustomerName varchar (50) , 
@CustomerCode varchar (50) = null , 
@Address text = null , 
@Phone1 varchar (50) = null , 
@Phone2 varchar (50) = null , 
@Mobile1 varchar (50) = null , 
@Mobile2 varchar (50) = null , 
@Email varchar (50) = null , 
@IsActive bit = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='BDCustomer'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @CustomerName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CustomerName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CustomerName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CustomerCode is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CustomerCode')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CustomerCode =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Address is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Address')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Address =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Phone1 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Phone1')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Phone1 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Phone2 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Phone2')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Phone2 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Mobile1 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Mobile1')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Mobile1 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Mobile2 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Mobile2')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Mobile2 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Email is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Email')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Email =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsActive is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsActive')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsActive =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDCustomer]( [CustomerName],[CustomerCode],[Address],[Phone1],[Phone2],[Mobile1],[Mobile2],[Email],[IsActive] )
          VALUES ( @CustomerName,@CustomerCode,@Address,@Phone1,@Phone2,@Mobile1,@Mobile2,@Email,@IsActive )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_BDCustomer_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@CustomerID int = null  
		@CustomerName varchar (50) = null  
		@CustomerCode varchar (50) = null  
		@Address text = null  
		@Phone1 varchar (50) = null  
		@Phone2 varchar (50) = null  
		@Mobile1 varchar (50) = null  
		@Mobile2 varchar (50) = null  
		@Email varchar (50) = null  
		@IsActive bit = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDCustomer' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_Insert_WithDefaultValues_AndReturn]
@CustomerID int = null , 
@CustomerName varchar (50) = null , 
@CustomerCode varchar (50) = null , 
@Address text = null , 
@Phone1 varchar (50) = null , 
@Phone2 varchar (50) = null , 
@Mobile1 varchar (50) = null , 
@Mobile2 varchar (50) = null , 
@Email varchar (50) = null , 
@IsActive bit = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='BDCustomer'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @CustomerName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CustomerName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CustomerName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CustomerCode is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CustomerCode')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CustomerCode =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Address is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Address')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Address =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Phone1 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Phone1')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Phone1 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Phone2 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Phone2')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Phone2 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Mobile1 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Mobile1')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Mobile1 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Mobile2 is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Mobile2')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Mobile2 =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Email is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Email')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Email =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsActive is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsActive')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsActive =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[BDCustomer]( [CustomerName],[CustomerCode],[Address],[Phone1],[Phone2],[Mobile1],[Mobile2],[Email],[IsActive] )
OUTPUT Inserted.*
VALUES (   @CustomerName,@CustomerCode,@Address,@Phone1,@Phone2,@Mobile1,@Mobile2,@Email,@IsActive  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@CustomerName varchar (50)  
		@CustomerCode varchar (50) = null  
		@Address text = null  
		@Phone1 varchar (50) = null  
		@Phone2 varchar (50) = null  
		@Mobile1 varchar (50) = null  
		@Mobile2 varchar (50) = null  
		@Email varchar (50) = null  
		@IsActive bit = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDCustomer' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_Insert]
@CustomerName varchar (50) , 
@CustomerCode varchar (50) = null , 
@Address text = null , 
@Phone1 varchar (50) = null , 
@Phone2 varchar (50) = null , 
@Mobile1 varchar (50) = null , 
@Mobile2 varchar (50) = null , 
@Email varchar (50) = null , 
@IsActive bit = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDCustomer]( [CustomerName],[CustomerCode],[Address],[Phone1],[Phone2],[Mobile1],[Mobile2],[Email],[IsActive] )
          VALUES ( @CustomerName,@CustomerCode,@Address,@Phone1,@Phone2,@Mobile1,@Mobile2,@Email,@IsActive )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@CustomerID int  
		@CustomerName varchar (50)  
		@CustomerCode varchar (50) = null  
		@Address text = null  
		@Phone1 varchar (50) = null  
		@Phone2 varchar (50) = null  
		@Mobile1 varchar (50) = null  
		@Mobile2 varchar (50) = null  
		@Email varchar (50) = null  
		@IsActive bit = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'BDCustomer' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_Update]
@CustomerID int , 
@CustomerName varchar (50) , 
@CustomerCode varchar (50) = null , 
@Address text = null , 
@Phone1 varchar (50) = null , 
@Phone2 varchar (50) = null , 
@Mobile1 varchar (50) = null , 
@Mobile2 varchar (50) = null , 
@Email varchar (50) = null , 
@IsActive bit = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[BDCustomer]
SET
	[CustomerName] = @CustomerName ,
	[CustomerCode] = @CustomerCode ,
	[Address] = @Address ,
	[Phone1] = @Phone1 ,
	[Phone2] = @Phone2 ,
	[Mobile1] = @Mobile1 ,
	[Mobile2] = @Mobile2 ,
	[Email] = @Email ,
	[IsActive] = @IsActive
WHERE
[CustomerID] = @CustomerID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@CustomerID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'BDCustomer' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_Delete]
@CustomerID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[BDCustomer]
WHERE
[CustomerID] = @CustomerID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'BDCustomer'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[BDCustomer] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@CustomerID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDCustomer' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_SelectByPrimaryKey]
@CustomerID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[CustomerID],[CustomerName],[CustomerCode],[Address],[Phone1],[Phone2],[Mobile1],[Mobile2],[Email],[IsActive]
FROM	[dbo].[BDCustomer]
WHERE
	[CustomerID] = @CustomerID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'BDCustomer' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[CustomerID],[CustomerName],[CustomerCode],[Address],[Phone1],[Phone2],[Mobile1],[Mobile2],[Email],[IsActive]
			FROM	[dbo].[BDCustomer]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'BDCustomer'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_BDCustomer_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[CustomerID],[CustomerName],[CustomerCode],[Address],[Phone1],[Phone2],[Mobile1],[Mobile2],[Email],[IsActive], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[BDCustomer]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'BDCustomer' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [CustomerID],[CustomerName],[CustomerCode],[Address],[Phone1],[Phone2],[Mobile1],[Mobile2],[Email],[IsActive]
			FROM [dbo].[BDCustomer] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [CustomerID],[CustomerName],[CustomerCode],[Address],[Phone1],[Phone2],[Mobile1],[Mobile2],[Email],[IsActive]
			FROM [dbo].[BDCustomer] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'BDCustomer' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [CustomerID],[CustomerName],[CustomerCode],[Address],[Phone1],[Phone2],[Mobile1],[Mobile2],[Email],[IsActive], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[BDCustomer] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [CustomerID],[CustomerName],[CustomerCode],[Address],[Phone1],[Phone2],[Mobile1],[Mobile2],[Email],[IsActive], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[BDCustomer] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'BDCustomer' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[BDCustomer]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDCustomer_SelectOneWithSALSalesHeaderUsingCustomerID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDCustomer_SelectOneWithSALSalesHeaderUsingCustomerID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDCustomer_SelectOneWithSALSalesHeaderUsingCustomerID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@CustomerID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDCustomer' and also the respective child records from 'SALSalesHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDCustomer_SelectOneWithSALSalesHeaderUsingCustomerID]
@CustomerID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_BDCustomer_SelectByPrimaryKey @CustomerID = @CustomerID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_SALSalesHeader_SelectAllByForeignKeyCustomerID  @CustomerID = @CustomerID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





-- Developer's comment header
-- AGGroupRole.sql
-- 
-- history:   12/26/2014 2:45:44 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupID int  
		@RoleID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'AGGroupRole' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_Insert_WithDefaultValues]
@GroupID int , 
@RoleID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='AGGroupRole'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @GroupID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='GroupID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @GroupID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RoleID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RoleID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RoleID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[AGGroupRole]( [GroupID],[RoleID] )
          VALUES ( @GroupID,@RoleID )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_AGGroupRole_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupRoleID int = null  
		@GroupID int = null  
		@RoleID int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'AGGroupRole' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_Insert_WithDefaultValues_AndReturn]
@GroupRoleID int = null , 
@GroupID int = null , 
@RoleID int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='AGGroupRole'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @GroupID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='GroupID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @GroupID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RoleID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RoleID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RoleID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[AGGroupRole]( [GroupID],[RoleID] )
OUTPUT Inserted.*
VALUES (   @GroupID,@RoleID  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupID int  
		@RoleID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'AGGroupRole' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_Insert]
@GroupID int , 
@RoleID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[AGGroupRole]( [GroupID],[RoleID] )
          VALUES ( @GroupID,@RoleID )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupRoleID int  
		@GroupID int  
		@RoleID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'AGGroupRole' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_Update]
@GroupRoleID int , 
@GroupID int , 
@RoleID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[AGGroupRole]
SET
	[GroupID] = @GroupID ,
	[RoleID] = @RoleID
WHERE
[GroupRoleID] = @GroupRoleID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupRoleID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'AGGroupRole' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_Delete]
@GroupRoleID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[AGGroupRole]
WHERE
[GroupRoleID] = @GroupRoleID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'AGGroupRole'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[AGGroupRole] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupRoleID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'AGGroupRole' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_SelectByPrimaryKey]
@GroupRoleID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[GroupRoleID],[GroupID],[RoleID]
FROM	[dbo].[AGGroupRole]
WHERE
	[GroupRoleID] = @GroupRoleID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'AGGroupRole' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[GroupRoleID],[GroupID],[RoleID]
			FROM	[dbo].[AGGroupRole]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'AGGroupRole'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_AGGroupRole_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[GroupRoleID],[GroupID],[RoleID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[AGGroupRole]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'AGGroupRole' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [GroupRoleID],[GroupID],[RoleID]
			FROM [dbo].[AGGroupRole] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [GroupRoleID],[GroupID],[RoleID]
			FROM [dbo].[AGGroupRole] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'AGGroupRole' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [GroupRoleID],[GroupID],[RoleID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[AGGroupRole] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [GroupRoleID],[GroupID],[RoleID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[AGGroupRole] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_AGGroupRole_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_AGGroupRole_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_AGGroupRole_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'AGGroupRole' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_AGGroupRole_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[AGGroupRole]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				






-- Developer's comment header
-- ADRole.sql
-- 
-- history:   12/26/2014 2:45:44 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@RoleName varchar (50) = null  
		@RolePath varchar (255) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'ADRole' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_Insert_WithDefaultValues]
@RoleName varchar (50) = null , 
@RolePath varchar (255) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='ADRole'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @RoleName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RoleName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RoleName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RolePath is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RolePath')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RolePath =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[ADRole]( [RoleName],[RolePath] )
          VALUES ( @RoleName,@RolePath )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_ADRole_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@RoleID int = null  
		@RoleName varchar (50) = null  
		@RolePath varchar (255) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'ADRole' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_ADRole_Insert_WithDefaultValues_AndReturn]
@RoleID int = null , 
@RoleName varchar (50) = null , 
@RolePath varchar (255) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='ADRole'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @RoleName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RoleName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RoleName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RolePath is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RolePath')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RolePath =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[ADRole]( [RoleName],[RolePath] )
OUTPUT Inserted.*
VALUES (   @RoleName,@RolePath  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@RoleName varchar (50) = null  
		@RolePath varchar (255) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'ADRole' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_Insert]
@RoleName varchar (50) = null , 
@RolePath varchar (255) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[ADRole]( [RoleName],[RolePath] )
          VALUES ( @RoleName,@RolePath )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@RoleID int  
		@RoleName varchar (50) = null  
		@RolePath varchar (255) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'ADRole' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_Update]
@RoleID int , 
@RoleName varchar (50) = null , 
@RolePath varchar (255) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[ADRole]
SET
	[RoleName] = @RoleName ,
	[RolePath] = @RolePath
WHERE
[RoleID] = @RoleID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@RoleID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'ADRole' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_Delete]
@RoleID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[ADRole]
WHERE
[RoleID] = @RoleID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'ADRole'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[ADRole] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@RoleID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'ADRole' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_SelectByPrimaryKey]
@RoleID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[RoleID],[RoleName],[RolePath]
FROM	[dbo].[ADRole]
WHERE
	[RoleID] = @RoleID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'ADRole' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[RoleID],[RoleName],[RolePath]
			FROM	[dbo].[ADRole]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'ADRole'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_ADRole_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[RoleID],[RoleName],[RolePath], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[ADRole]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'ADRole' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [RoleID],[RoleName],[RolePath]
			FROM [dbo].[ADRole] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [RoleID],[RoleName],[RolePath]
			FROM [dbo].[ADRole] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'ADRole' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [RoleID],[RoleName],[RolePath], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[ADRole] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [RoleID],[RoleName],[RolePath], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[ADRole] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADRole_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADRole_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADRole_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'ADRole' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADRole_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[ADRole]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				






-- Developer's comment header
-- ADGroup.sql
-- 
-- history:   12/26/2014 2:45:44 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupName varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'ADGroup' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_Insert_WithDefaultValues]
@GroupName varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='ADGroup'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @GroupName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='GroupName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @GroupName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[ADGroup]( [GroupName] )
          VALUES ( @GroupName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_ADGroup_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupID int = null  
		@GroupName varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'ADGroup' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_Insert_WithDefaultValues_AndReturn]
@GroupID int = null , 
@GroupName varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='ADGroup'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @GroupName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='GroupName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @GroupName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[ADGroup]( [GroupName] )
OUTPUT Inserted.*
VALUES (   @GroupName  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupName varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'ADGroup' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_Insert]
@GroupName varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[ADGroup]( [GroupName] )
          VALUES ( @GroupName )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupID int  
		@GroupName varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'ADGroup' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_Update]
@GroupID int , 
@GroupName varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[ADGroup]
SET
	[GroupName] = @GroupName
WHERE
[GroupID] = @GroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'ADGroup' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_Delete]
@GroupID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[ADGroup]
WHERE
[GroupID] = @GroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'ADGroup'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[ADGroup] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'ADGroup' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_SelectByPrimaryKey]
@GroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[GroupID],[GroupName]
FROM	[dbo].[ADGroup]
WHERE
	[GroupID] = @GroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'ADGroup' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[GroupID],[GroupName]
			FROM	[dbo].[ADGroup]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'ADGroup'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_ADGroup_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[GroupID],[GroupName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[ADGroup]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'ADGroup' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [GroupID],[GroupName]
			FROM [dbo].[ADGroup] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [GroupID],[GroupName]
			FROM [dbo].[ADGroup] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'ADGroup' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [GroupID],[GroupName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[ADGroup] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [GroupID],[GroupName], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[ADGroup] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'ADGroup' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[ADGroup]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADGroup_SelectOneWithADUserUsingGroupID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADGroup_SelectOneWithADUserUsingGroupID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADGroup_SelectOneWithADUserUsingGroupID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:44 AM

INPUTS	: 
		@GroupID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'ADGroup' and also the respective child records from 'ADUser'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADGroup_SelectOneWithADUserUsingGroupID]
@GroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_ADGroup_SelectByPrimaryKey @GroupID = @GroupID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_ADUser_SelectAllByForeignKeyGroupID  @GroupID = @GroupID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





-- Developer's comment header
-- SALSalesLine.sql
-- 
-- history:   12/26/2014 2:45:45 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesHeaderID int  
		@ProductID int  
		@TotalQty float  
		@TotalBonus float  
		@DiscountAmount float = null  
		@DiscountRatio float  
		@UnitPrice float  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_Insert_WithDefaultValues]
@SalesHeaderID int , 
@ProductID int , 
@TotalQty float , 
@TotalBonus float , 
@DiscountAmount float = null , 
@DiscountRatio float , 
@UnitPrice float , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='SALSalesLine'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @SalesHeaderID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SalesHeaderID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SalesHeaderID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalBonus is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalBonus')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalBonus =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DiscountAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DiscountAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DiscountAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DiscountRatio is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DiscountRatio')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DiscountRatio =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UnitPrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UnitPrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UnitPrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[SALSalesLine]( [SalesHeaderID],[ProductID],[TotalQty],[TotalBonus],[DiscountAmount],[DiscountRatio],[UnitPrice],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
          VALUES ( @SalesHeaderID,@ProductID,@TotalQty,@TotalBonus,@DiscountAmount,@DiscountRatio,@UnitPrice,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_SALSalesLine_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineID int = null  
		@SalesHeaderID int = null  
		@ProductID int = null  
		@TotalQty float = null  
		@TotalBonus float = null  
		@DiscountAmount float = null  
		@DiscountRatio float = null  
		@UnitPrice float = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit = null  
		@DeletedBy int = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesLine' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_Insert_WithDefaultValues_AndReturn]
@SalesLineID int = null , 
@SalesHeaderID int = null , 
@ProductID int = null , 
@TotalQty float = null , 
@TotalBonus float = null , 
@DiscountAmount float = null , 
@DiscountRatio float = null , 
@UnitPrice float = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit = null , 
@DeletedBy int = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='SALSalesLine'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @SalesHeaderID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SalesHeaderID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SalesHeaderID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalBonus is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalBonus')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalBonus =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DiscountAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DiscountAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DiscountAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DiscountRatio is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DiscountRatio')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DiscountRatio =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UnitPrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UnitPrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UnitPrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[SALSalesLine]( [SalesHeaderID],[ProductID],[TotalQty],[TotalBonus],[DiscountAmount],[DiscountRatio],[UnitPrice],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
OUTPUT Inserted.*
VALUES (   @SalesHeaderID,@ProductID,@TotalQty,@TotalBonus,@DiscountAmount,@DiscountRatio,@UnitPrice,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesHeaderID int  
		@ProductID int  
		@TotalQty float  
		@TotalBonus float  
		@DiscountAmount float = null  
		@DiscountRatio float  
		@UnitPrice float  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_Insert]
@SalesHeaderID int , 
@ProductID int , 
@TotalQty float , 
@TotalBonus float , 
@DiscountAmount float = null , 
@DiscountRatio float , 
@UnitPrice float , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[SALSalesLine]( [SalesHeaderID],[ProductID],[TotalQty],[TotalBonus],[DiscountAmount],[DiscountRatio],[UnitPrice],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
          VALUES ( @SalesHeaderID,@ProductID,@TotalQty,@TotalBonus,@DiscountAmount,@DiscountRatio,@UnitPrice,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineID int  
		@SalesHeaderID int  
		@ProductID int  
		@TotalQty float  
		@TotalBonus float  
		@DiscountAmount float = null  
		@DiscountRatio float  
		@UnitPrice float  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'SALSalesLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_Update]
@SalesLineID int , 
@SalesHeaderID int , 
@ProductID int , 
@TotalQty float , 
@TotalBonus float , 
@DiscountAmount float = null , 
@DiscountRatio float , 
@UnitPrice float , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[SALSalesLine]
SET
	[SalesHeaderID] = @SalesHeaderID ,
	[ProductID] = @ProductID ,
	[TotalQty] = @TotalQty ,
	[TotalBonus] = @TotalBonus ,
	[DiscountAmount] = @DiscountAmount ,
	[DiscountRatio] = @DiscountRatio ,
	[UnitPrice] = @UnitPrice ,
	[CreatedBy] = @CreatedBy ,
	[CreateDate] = @CreateDate ,
	[UpdatedBy] = @UpdatedBy ,
	[UpdateDate] = @UpdateDate ,
	[IsDeleted] = @IsDeleted ,
	[DeletedBy] = @DeletedBy ,
	[DeleteDate] = @DeleteDate
WHERE
[SalesLineID] = @SalesLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'SALSalesLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_Delete]
@SalesLineID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[SALSalesLine]
WHERE
[SalesLineID] = @SalesLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'SALSalesLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[SALSalesLine] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_SelectByPrimaryKey]
@SalesLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesLineID],[SalesHeaderID],[ProductID],[TotalQty],[TotalBonus],[DiscountAmount],[DiscountRatio],[UnitPrice],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
FROM	[dbo].[SALSalesLine]
WHERE
	[SalesLineID] = @SalesLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'SALSalesLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[SalesLineID],[SalesHeaderID],[ProductID],[TotalQty],[TotalBonus],[DiscountAmount],[DiscountRatio],[UnitPrice],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM	[dbo].[SALSalesLine]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'SALSalesLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_SALSalesLine_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[SalesLineID],[SalesHeaderID],[ProductID],[TotalQty],[TotalBonus],[DiscountAmount],[DiscountRatio],[UnitPrice],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[SALSalesLine]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'SALSalesLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [SalesLineID],[SalesHeaderID],[ProductID],[TotalQty],[TotalBonus],[DiscountAmount],[DiscountRatio],[UnitPrice],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM [dbo].[SALSalesLine] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [SalesLineID],[SalesHeaderID],[ProductID],[TotalQty],[TotalBonus],[DiscountAmount],[DiscountRatio],[UnitPrice],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM [dbo].[SALSalesLine] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'SALSalesLine' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [SalesLineID],[SalesHeaderID],[ProductID],[TotalQty],[TotalBonus],[DiscountAmount],[DiscountRatio],[UnitPrice],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[SALSalesLine] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [SalesLineID],[SalesHeaderID],[ProductID],[TotalQty],[TotalBonus],[DiscountAmount],[DiscountRatio],[UnitPrice],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[SALSalesLine] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'SALSalesLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[SALSalesLine]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLine_SelectOneWithSALSalesLineBatchUsingSalesLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLine_SelectOneWithSALSalesLineBatchUsingSalesLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLine_SelectOneWithSALSalesLineBatchUsingSalesLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesLine' and also the respective child records from 'SALSalesLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLine_SelectOneWithSALSalesLineBatchUsingSalesLineID]
@SalesLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_SALSalesLine_SelectByPrimaryKey @SalesLineID = @SalesLineID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_SALSalesLineBatch_SelectAllByForeignKeySalesLineID  @SalesLineID = @SalesLineID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





-- Developer's comment header
-- SALSalesReturnLine.sql
-- 
-- history:   12/26/2014 2:45:45 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Qty float  
		@Reason text = null  
		@OriginalSalesLineID int = null  
		@BatchID int  
		@BatchNumber varchar (50) = null  
		@ExpiryDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesReturnLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_Insert_WithDefaultValues]
@Qty float , 
@Reason text = null , 
@OriginalSalesLineID int = null , 
@BatchID int , 
@BatchNumber varchar (50) = null , 
@ExpiryDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='SALSalesReturnLine'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @Qty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Qty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Qty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Reason is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Reason')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Reason =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OriginalSalesLineID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OriginalSalesLineID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OriginalSalesLineID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchNumber is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchNumber')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchNumber =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ExpiryDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ExpiryDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ExpiryDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[SALSalesReturnLine]( [Qty],[Reason],[OriginalSalesLineID],[BatchID],[BatchNumber],[ExpiryDate] )
          VALUES ( @Qty,@Reason,@OriginalSalesLineID,@BatchID,@BatchNumber,@ExpiryDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_SALSalesReturnLine_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesReturnLineID int = null  
		@Qty float = null  
		@Reason text = null  
		@OriginalSalesLineID int = null  
		@BatchID int = null  
		@BatchNumber varchar (50) = null  
		@ExpiryDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesReturnLine' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_Insert_WithDefaultValues_AndReturn]
@SalesReturnLineID int = null , 
@Qty float = null , 
@Reason text = null , 
@OriginalSalesLineID int = null , 
@BatchID int = null , 
@BatchNumber varchar (50) = null , 
@ExpiryDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='SALSalesReturnLine'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @Qty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Qty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Qty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Reason is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Reason')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Reason =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OriginalSalesLineID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OriginalSalesLineID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OriginalSalesLineID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchNumber is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchNumber')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchNumber =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ExpiryDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ExpiryDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ExpiryDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[SALSalesReturnLine]( [Qty],[Reason],[OriginalSalesLineID],[BatchID],[BatchNumber],[ExpiryDate] )
OUTPUT Inserted.*
VALUES (   @Qty,@Reason,@OriginalSalesLineID,@BatchID,@BatchNumber,@ExpiryDate  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Qty float  
		@Reason text = null  
		@OriginalSalesLineID int = null  
		@BatchID int  
		@BatchNumber varchar (50) = null  
		@ExpiryDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesReturnLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_Insert]
@Qty float , 
@Reason text = null , 
@OriginalSalesLineID int = null , 
@BatchID int , 
@BatchNumber varchar (50) = null , 
@ExpiryDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[SALSalesReturnLine]( [Qty],[Reason],[OriginalSalesLineID],[BatchID],[BatchNumber],[ExpiryDate] )
          VALUES ( @Qty,@Reason,@OriginalSalesLineID,@BatchID,@BatchNumber,@ExpiryDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesReturnLineID int  
		@Qty float  
		@Reason text = null  
		@OriginalSalesLineID int = null  
		@BatchID int  
		@BatchNumber varchar (50) = null  
		@ExpiryDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'SALSalesReturnLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_Update]
@SalesReturnLineID int , 
@Qty float , 
@Reason text = null , 
@OriginalSalesLineID int = null , 
@BatchID int , 
@BatchNumber varchar (50) = null , 
@ExpiryDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[SALSalesReturnLine]
SET
	[Qty] = @Qty ,
	[Reason] = @Reason ,
	[OriginalSalesLineID] = @OriginalSalesLineID ,
	[BatchID] = @BatchID ,
	[BatchNumber] = @BatchNumber ,
	[ExpiryDate] = @ExpiryDate
WHERE
[SalesReturnLineID] = @SalesReturnLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesReturnLineID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'SALSalesReturnLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_Delete]
@SalesReturnLineID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[SALSalesReturnLine]
WHERE
[SalesReturnLineID] = @SalesReturnLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'SALSalesReturnLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[SALSalesReturnLine] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesReturnLineID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_SelectByPrimaryKey]
@SalesReturnLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesReturnLineID],[Qty],[Reason],[OriginalSalesLineID],[BatchID],[BatchNumber],[ExpiryDate]
FROM	[dbo].[SALSalesReturnLine]
WHERE
	[SalesReturnLineID] = @SalesReturnLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'SALSalesReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[SalesReturnLineID],[Qty],[Reason],[OriginalSalesLineID],[BatchID],[BatchNumber],[ExpiryDate]
			FROM	[dbo].[SALSalesReturnLine]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'SALSalesReturnLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_SALSalesReturnLine_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[SalesReturnLineID],[Qty],[Reason],[OriginalSalesLineID],[BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[SALSalesReturnLine]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'SALSalesReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [SalesReturnLineID],[Qty],[Reason],[OriginalSalesLineID],[BatchID],[BatchNumber],[ExpiryDate]
			FROM [dbo].[SALSalesReturnLine] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [SalesReturnLineID],[Qty],[Reason],[OriginalSalesLineID],[BatchID],[BatchNumber],[ExpiryDate]
			FROM [dbo].[SALSalesReturnLine] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'SALSalesReturnLine' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [SalesReturnLineID],[Qty],[Reason],[OriginalSalesLineID],[BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[SALSalesReturnLine] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [SalesReturnLineID],[Qty],[Reason],[OriginalSalesLineID],[BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[SALSalesReturnLine] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnLine_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnLine_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnLine_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'SALSalesReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnLine_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[SALSalesReturnLine]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				






-- Developer's comment header
-- SALSalesReturnHeader.sql
-- 
-- history:   12/26/2014 2:45:45 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@ReturnDate datetime  
		@OriginalSalesHeadeID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy varchar (10) = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesReturnHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_Insert_WithDefaultValues]
@ReturnDate datetime , 
@OriginalSalesHeadeID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy varchar (10) = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='SALSalesReturnHeader'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ReturnDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ReturnDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ReturnDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OriginalSalesHeadeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OriginalSalesHeadeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OriginalSalesHeadeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( varchar (10),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[SALSalesReturnHeader]( [ReturnDate],[OriginalSalesHeadeID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
          VALUES ( @ReturnDate,@OriginalSalesHeadeID,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_SALSalesReturnHeader_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SlaesReturnHeaderID int = null  
		@ReturnDate datetime = null  
		@OriginalSalesHeadeID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit = null  
		@DeletedBy varchar (10) = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesReturnHeader' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_Insert_WithDefaultValues_AndReturn]
@SlaesReturnHeaderID int = null , 
@ReturnDate datetime = null , 
@OriginalSalesHeadeID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit = null , 
@DeletedBy varchar (10) = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='SALSalesReturnHeader'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ReturnDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ReturnDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ReturnDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OriginalSalesHeadeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OriginalSalesHeadeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OriginalSalesHeadeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( varchar (10),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[SALSalesReturnHeader]( [ReturnDate],[OriginalSalesHeadeID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
OUTPUT Inserted.*
VALUES (   @ReturnDate,@OriginalSalesHeadeID,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@ReturnDate datetime  
		@OriginalSalesHeadeID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy varchar (10) = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesReturnHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_Insert]
@ReturnDate datetime , 
@OriginalSalesHeadeID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy varchar (10) = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[SALSalesReturnHeader]( [ReturnDate],[OriginalSalesHeadeID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
          VALUES ( @ReturnDate,@OriginalSalesHeadeID,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SlaesReturnHeaderID int  
		@ReturnDate datetime  
		@OriginalSalesHeadeID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy varchar (10) = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'SALSalesReturnHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_Update]
@SlaesReturnHeaderID int , 
@ReturnDate datetime , 
@OriginalSalesHeadeID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy varchar (10) = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[SALSalesReturnHeader]
SET
	[ReturnDate] = @ReturnDate ,
	[OriginalSalesHeadeID] = @OriginalSalesHeadeID ,
	[CreatedBy] = @CreatedBy ,
	[CreateDate] = @CreateDate ,
	[UpdatedBy] = @UpdatedBy ,
	[UpdateDate] = @UpdateDate ,
	[IsDeleted] = @IsDeleted ,
	[DeletedBy] = @DeletedBy ,
	[DeleteDate] = @DeleteDate
WHERE
[SlaesReturnHeaderID] = @SlaesReturnHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SlaesReturnHeaderID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'SALSalesReturnHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_Delete]
@SlaesReturnHeaderID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[SALSalesReturnHeader]
WHERE
[SlaesReturnHeaderID] = @SlaesReturnHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'SALSalesReturnHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[SALSalesReturnHeader] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SlaesReturnHeaderID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_SelectByPrimaryKey]
@SlaesReturnHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SlaesReturnHeaderID],[ReturnDate],[OriginalSalesHeadeID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
FROM	[dbo].[SALSalesReturnHeader]
WHERE
	[SlaesReturnHeaderID] = @SlaesReturnHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'SALSalesReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[SlaesReturnHeaderID],[ReturnDate],[OriginalSalesHeadeID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM	[dbo].[SALSalesReturnHeader]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'SALSalesReturnHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_SALSalesReturnHeader_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[SlaesReturnHeaderID],[ReturnDate],[OriginalSalesHeadeID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[SALSalesReturnHeader]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'SALSalesReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [SlaesReturnHeaderID],[ReturnDate],[OriginalSalesHeadeID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM [dbo].[SALSalesReturnHeader] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [SlaesReturnHeaderID],[ReturnDate],[OriginalSalesHeadeID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM [dbo].[SALSalesReturnHeader] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'SALSalesReturnHeader' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [SlaesReturnHeaderID],[ReturnDate],[OriginalSalesHeadeID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[SALSalesReturnHeader] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [SlaesReturnHeaderID],[ReturnDate],[OriginalSalesHeadeID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[SALSalesReturnHeader] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesReturnHeader_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesReturnHeader_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesReturnHeader_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'SALSalesReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesReturnHeader_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[SALSalesReturnHeader]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				






-- Developer's comment header
-- SALSalesLineBatch.sql
-- 
-- history:   12/26/2014 2:45:45 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineID int = null  
		@BatchID int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_Insert_WithDefaultValues]
@SalesLineID int = null , 
@BatchID int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='SALSalesLineBatch'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @SalesLineID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SalesLineID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SalesLineID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[SALSalesLineBatch]( [SalesLineID],[BatchID] )
          VALUES ( @SalesLineID,@BatchID )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_SALSalesLineBatch_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineBatchID int = null  
		@SalesLineID int = null  
		@BatchID int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesLineBatch' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_Insert_WithDefaultValues_AndReturn]
@SalesLineBatchID int = null , 
@SalesLineID int = null , 
@BatchID int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='SALSalesLineBatch'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @SalesLineID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SalesLineID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SalesLineID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[SALSalesLineBatch]( [SalesLineID],[BatchID] )
OUTPUT Inserted.*
VALUES (   @SalesLineID,@BatchID  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineID int = null  
		@BatchID int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_Insert]
@SalesLineID int = null , 
@BatchID int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[SALSalesLineBatch]( [SalesLineID],[BatchID] )
          VALUES ( @SalesLineID,@BatchID )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineBatchID int  
		@SalesLineID int = null  
		@BatchID int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'SALSalesLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_Update]
@SalesLineBatchID int , 
@SalesLineID int = null , 
@BatchID int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[SALSalesLineBatch]
SET
	[SalesLineID] = @SalesLineID ,
	[BatchID] = @BatchID
WHERE
[SalesLineBatchID] = @SalesLineBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineBatchID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'SALSalesLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_Delete]
@SalesLineBatchID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[SALSalesLineBatch]
WHERE
[SalesLineBatchID] = @SalesLineBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'SALSalesLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[SALSalesLineBatch] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineBatchID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_SelectByPrimaryKey]
@SalesLineBatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesLineBatchID],[SalesLineID],[BatchID]
FROM	[dbo].[SALSalesLineBatch]
WHERE
	[SalesLineBatchID] = @SalesLineBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'SALSalesLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[SalesLineBatchID],[SalesLineID],[BatchID]
			FROM	[dbo].[SALSalesLineBatch]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'SALSalesLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_SALSalesLineBatch_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[SalesLineBatchID],[SalesLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[SALSalesLineBatch]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'SALSalesLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [SalesLineBatchID],[SalesLineID],[BatchID]
			FROM [dbo].[SALSalesLineBatch] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [SalesLineBatchID],[SalesLineID],[BatchID]
			FROM [dbo].[SALSalesLineBatch] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'SALSalesLineBatch' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [SalesLineBatchID],[SalesLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[SALSalesLineBatch] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [SalesLineBatchID],[SalesLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[SALSalesLineBatch] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'SALSalesLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[SALSalesLineBatch]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeyBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeyBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_SelectAllByForeignKeyBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@BatchID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeyBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesLineBatchID],[SalesLineID],[BatchID]
FROM	[dbo].[SALSalesLineBatch]
WHERE
	[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeySalesLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeySalesLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_SelectAllByForeignKeySalesLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeySalesLineID]
@SalesLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesLineBatchID],[SalesLineID],[BatchID]
FROM	[dbo].[SALSalesLineBatch]
WHERE
	[SalesLineID] = @SalesLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeyBatchIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeyBatchIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_SelectAllByForeignKeyBatchIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	:
		@BatchID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeyBatchIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[SalesLineBatchID],[SalesLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[SALSalesLineBatch]
			WHERE [BatchID] = @BatchID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeySalesLineIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeySalesLineIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_SelectAllByForeignKeySalesLineIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	:
		@SalesLineID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_SelectAllByForeignKeySalesLineIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@SalesLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[SalesLineBatchID],[SalesLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[SALSalesLineBatch]
			WHERE [SalesLineID] = @SalesLineID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_DeleteAllByForeignKeyBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_DeleteAllByForeignKeyBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_DeleteAllByForeignKeyBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@BatchID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_DeleteAllByForeignKeyBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[SALSalesLineBatch]
WHERE
	[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesLineBatch_DeleteAllByForeignKeySalesLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesLineBatch_DeleteAllByForeignKeySalesLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesLineBatch_DeleteAllByForeignKeySalesLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SalesLineID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesLineBatch_DeleteAllByForeignKeySalesLineID]
@SalesLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[SALSalesLineBatch]
WHERE
	[SalesLineID] = @SalesLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- PURPurchaseHeader.sql
-- 
-- history:   12/26/2014 2:45:45 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PurchaseDate datetime  
		@PaymentTypeID int = null  
		@SupplierID int  
		@InvoiceNumber varchar (50) = null  
		@CreateDate datetime = null  
		@CreatedBy int = null  
		@updateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit  
		@DeleteDate datetime = null  
		@TotalPrice float  
		@ServicePrice float  
		@PaidAmount float  
		@IsClosed bit  
		@IsVoid bit  
		@IsPrinted bit  
		@RefuseReasonID int = null  
		@TotalDiscountAmount float  
		@TotalDiscountRatio float  
		@TaxTypeID int = null  
		@RenainingAmount float  
		@LastDayToPay datetime = null  
		@DeletedBy int = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_Insert_WithDefaultValues]
@PurchaseDate datetime , 
@PaymentTypeID int = null , 
@SupplierID int , 
@InvoiceNumber varchar (50) = null , 
@CreateDate datetime = null , 
@CreatedBy int = null , 
@updateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit , 
@DeleteDate datetime = null , 
@TotalPrice float , 
@ServicePrice float , 
@PaidAmount float , 
@IsClosed bit , 
@IsVoid bit , 
@IsPrinted bit , 
@RefuseReasonID int = null , 
@TotalDiscountAmount float , 
@TotalDiscountRatio float , 
@TaxTypeID int = null , 
@RenainingAmount float , 
@LastDayToPay datetime = null , 
@DeletedBy int = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='PURPurchaseHeader'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @PurchaseDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PurchaseDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PurchaseDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @PaymentTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaymentTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaymentTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @SupplierID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SupplierID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SupplierID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @InvoiceNumber is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='InvoiceNumber')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @InvoiceNumber =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @updateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='updateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @updateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalPrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalPrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalPrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ServicePrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ServicePrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ServicePrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @PaidAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaidAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaidAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsClosed is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsClosed')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsClosed =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsVoid is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsVoid')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsVoid =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsPrinted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsPrinted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsPrinted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RefuseReasonID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RefuseReasonID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RefuseReasonID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalDiscountAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalDiscountAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalDiscountAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalDiscountRatio is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalDiscountRatio')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalDiscountRatio =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TaxTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TaxTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TaxTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RenainingAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RenainingAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RenainingAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @LastDayToPay is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='LastDayToPay')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @LastDayToPay =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Notes is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Notes')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Notes =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[PURPurchaseHeader]( [PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes] )
          VALUES ( @PurchaseDate,@PaymentTypeID,@SupplierID,@InvoiceNumber,@CreateDate,@CreatedBy,@updateDate,@UpdatedBy,@IsDeleted,@DeleteDate,@TotalPrice,@ServicePrice,@PaidAmount,@IsClosed,@IsVoid,@IsPrinted,@RefuseReasonID,@TotalDiscountAmount,@TotalDiscountRatio,@TaxTypeID,@RenainingAmount,@LastDayToPay,@DeletedBy,@Notes )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_PURPurchaseHeader_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PurcaseHeaderID int = null  
		@PurchaseDate datetime = null  
		@PaymentTypeID int = null  
		@SupplierID int = null  
		@InvoiceNumber varchar (50) = null  
		@CreateDate datetime = null  
		@CreatedBy int = null  
		@updateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit = null  
		@DeleteDate datetime = null  
		@TotalPrice float = null  
		@ServicePrice float = null  
		@PaidAmount float = null  
		@IsClosed bit = null  
		@IsVoid bit = null  
		@IsPrinted bit = null  
		@RefuseReasonID int = null  
		@TotalDiscountAmount float = null  
		@TotalDiscountRatio float = null  
		@TaxTypeID int = null  
		@RenainingAmount float = null  
		@LastDayToPay datetime = null  
		@DeletedBy int = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseHeader' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_Insert_WithDefaultValues_AndReturn]
@PurcaseHeaderID int = null , 
@PurchaseDate datetime = null , 
@PaymentTypeID int = null , 
@SupplierID int = null , 
@InvoiceNumber varchar (50) = null , 
@CreateDate datetime = null , 
@CreatedBy int = null , 
@updateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit = null , 
@DeleteDate datetime = null , 
@TotalPrice float = null , 
@ServicePrice float = null , 
@PaidAmount float = null , 
@IsClosed bit = null , 
@IsVoid bit = null , 
@IsPrinted bit = null , 
@RefuseReasonID int = null , 
@TotalDiscountAmount float = null , 
@TotalDiscountRatio float = null , 
@TaxTypeID int = null , 
@RenainingAmount float = null , 
@LastDayToPay datetime = null , 
@DeletedBy int = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='PURPurchaseHeader'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @PurchaseDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PurchaseDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PurchaseDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @PaymentTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaymentTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaymentTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @SupplierID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SupplierID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SupplierID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @InvoiceNumber is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='InvoiceNumber')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @InvoiceNumber =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @updateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='updateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @updateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalPrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalPrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalPrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ServicePrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ServicePrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ServicePrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @PaidAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaidAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaidAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsClosed is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsClosed')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsClosed =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsVoid is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsVoid')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsVoid =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsPrinted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsPrinted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsPrinted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RefuseReasonID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RefuseReasonID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RefuseReasonID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalDiscountAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalDiscountAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalDiscountAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalDiscountRatio is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalDiscountRatio')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalDiscountRatio =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TaxTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TaxTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TaxTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RenainingAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RenainingAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RenainingAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @LastDayToPay is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='LastDayToPay')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @LastDayToPay =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Notes is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Notes')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Notes =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[PURPurchaseHeader]( [PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes] )
OUTPUT Inserted.*
VALUES (   @PurchaseDate,@PaymentTypeID,@SupplierID,@InvoiceNumber,@CreateDate,@CreatedBy,@updateDate,@UpdatedBy,@IsDeleted,@DeleteDate,@TotalPrice,@ServicePrice,@PaidAmount,@IsClosed,@IsVoid,@IsPrinted,@RefuseReasonID,@TotalDiscountAmount,@TotalDiscountRatio,@TaxTypeID,@RenainingAmount,@LastDayToPay,@DeletedBy,@Notes  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PurchaseDate datetime  
		@PaymentTypeID int = null  
		@SupplierID int  
		@InvoiceNumber varchar (50) = null  
		@CreateDate datetime = null  
		@CreatedBy int = null  
		@updateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit  
		@DeleteDate datetime = null  
		@TotalPrice float  
		@ServicePrice float  
		@PaidAmount float  
		@IsClosed bit  
		@IsVoid bit  
		@IsPrinted bit  
		@RefuseReasonID int = null  
		@TotalDiscountAmount float  
		@TotalDiscountRatio float  
		@TaxTypeID int = null  
		@RenainingAmount float  
		@LastDayToPay datetime = null  
		@DeletedBy int = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_Insert]
@PurchaseDate datetime , 
@PaymentTypeID int = null , 
@SupplierID int , 
@InvoiceNumber varchar (50) = null , 
@CreateDate datetime = null , 
@CreatedBy int = null , 
@updateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit , 
@DeleteDate datetime = null , 
@TotalPrice float , 
@ServicePrice float , 
@PaidAmount float , 
@IsClosed bit , 
@IsVoid bit , 
@IsPrinted bit , 
@RefuseReasonID int = null , 
@TotalDiscountAmount float , 
@TotalDiscountRatio float , 
@TaxTypeID int = null , 
@RenainingAmount float , 
@LastDayToPay datetime = null , 
@DeletedBy int = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[PURPurchaseHeader]( [PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes] )
          VALUES ( @PurchaseDate,@PaymentTypeID,@SupplierID,@InvoiceNumber,@CreateDate,@CreatedBy,@updateDate,@UpdatedBy,@IsDeleted,@DeleteDate,@TotalPrice,@ServicePrice,@PaidAmount,@IsClosed,@IsVoid,@IsPrinted,@RefuseReasonID,@TotalDiscountAmount,@TotalDiscountRatio,@TaxTypeID,@RenainingAmount,@LastDayToPay,@DeletedBy,@Notes )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PurcaseHeaderID int  
		@PurchaseDate datetime  
		@PaymentTypeID int = null  
		@SupplierID int  
		@InvoiceNumber varchar (50) = null  
		@CreateDate datetime = null  
		@CreatedBy int = null  
		@updateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit  
		@DeleteDate datetime = null  
		@TotalPrice float  
		@ServicePrice float  
		@PaidAmount float  
		@IsClosed bit  
		@IsVoid bit  
		@IsPrinted bit  
		@RefuseReasonID int = null  
		@TotalDiscountAmount float  
		@TotalDiscountRatio float  
		@TaxTypeID int = null  
		@RenainingAmount float  
		@LastDayToPay datetime = null  
		@DeletedBy int = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'PURPurchaseHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_Update]
@PurcaseHeaderID int , 
@PurchaseDate datetime , 
@PaymentTypeID int = null , 
@SupplierID int , 
@InvoiceNumber varchar (50) = null , 
@CreateDate datetime = null , 
@CreatedBy int = null , 
@updateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit , 
@DeleteDate datetime = null , 
@TotalPrice float , 
@ServicePrice float , 
@PaidAmount float , 
@IsClosed bit , 
@IsVoid bit , 
@IsPrinted bit , 
@RefuseReasonID int = null , 
@TotalDiscountAmount float , 
@TotalDiscountRatio float , 
@TaxTypeID int = null , 
@RenainingAmount float , 
@LastDayToPay datetime = null , 
@DeletedBy int = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[PURPurchaseHeader]
SET
	[PurchaseDate] = @PurchaseDate ,
	[PaymentTypeID] = @PaymentTypeID ,
	[SupplierID] = @SupplierID ,
	[InvoiceNumber] = @InvoiceNumber ,
	[CreateDate] = @CreateDate ,
	[CreatedBy] = @CreatedBy ,
	[updateDate] = @updateDate ,
	[UpdatedBy] = @UpdatedBy ,
	[IsDeleted] = @IsDeleted ,
	[DeleteDate] = @DeleteDate ,
	[TotalPrice] = @TotalPrice ,
	[ServicePrice] = @ServicePrice ,
	[PaidAmount] = @PaidAmount ,
	[IsClosed] = @IsClosed ,
	[IsVoid] = @IsVoid ,
	[IsPrinted] = @IsPrinted ,
	[RefuseReasonID] = @RefuseReasonID ,
	[TotalDiscountAmount] = @TotalDiscountAmount ,
	[TotalDiscountRatio] = @TotalDiscountRatio ,
	[TaxTypeID] = @TaxTypeID ,
	[RenainingAmount] = @RenainingAmount ,
	[LastDayToPay] = @LastDayToPay ,
	[DeletedBy] = @DeletedBy ,
	[Notes] = @Notes
WHERE
[PurcaseHeaderID] = @PurcaseHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PurcaseHeaderID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'PURPurchaseHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_Delete]
@PurcaseHeaderID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[PURPurchaseHeader]
WHERE
[PurcaseHeaderID] = @PurcaseHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'PURPurchaseHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[PURPurchaseHeader] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PurcaseHeaderID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectByPrimaryKey]
@PurcaseHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes]
FROM	[dbo].[PURPurchaseHeader]
WHERE
	[PurcaseHeaderID] = @PurcaseHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes]
			FROM	[dbo].[PURPurchaseHeader]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'PURPurchaseHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_PURPurchaseHeader_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[PURPurchaseHeader]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes]
			FROM [dbo].[PURPurchaseHeader] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes]
			FROM [dbo].[PURPurchaseHeader] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'PURPurchaseHeader' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[PURPurchaseHeader] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[PURPurchaseHeader] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[PURPurchaseHeader]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectOneWithPURPurchaseLineUsingPurchaseHeaderID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectOneWithPURPurchaseLineUsingPurchaseHeaderID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectOneWithPURPurchaseLineUsingPurchaseHeaderID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PurcaseHeaderID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' and also the respective child records from 'PURPurchaseLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectOneWithPURPurchaseLineUsingPurchaseHeaderID]
@PurcaseHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_PURPurchaseHeader_SelectByPrimaryKey @PurcaseHeaderID = @PurcaseHeaderID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseLine_SelectAllByForeignKeyPurchaseHeaderID  @PurcaseHeaderID = @PurcaseHeaderID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectOneWithPURPurchaseReturnHeaderUsingOriginalHeaderID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectOneWithPURPurchaseReturnHeaderUsingOriginalHeaderID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectOneWithPURPurchaseReturnHeaderUsingOriginalHeaderID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PurcaseHeaderID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' and also the respective child records from 'PURPurchaseReturnHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectOneWithPURPurchaseReturnHeaderUsingOriginalHeaderID]
@PurcaseHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_PURPurchaseHeader_SelectByPrimaryKey @PurcaseHeaderID = @PurcaseHeaderID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseReturnHeader_SelectAllByForeignKeyOriginalHeaderID  @PurcaseHeaderID = @PurcaseHeaderID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyRefuseReasonID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyRefuseReasonID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAllByForeignKeyRefuseReasonID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@RefuseReasonID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyRefuseReasonID]
@RefuseReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes]
FROM	[dbo].[PURPurchaseHeader]
WHERE
	[RefuseReasonID] = @RefuseReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeySupplierID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeySupplierID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAllByForeignKeySupplierID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SupplierID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeySupplierID]
@SupplierID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes]
FROM	[dbo].[PURPurchaseHeader]
WHERE
	[SupplierID] = @SupplierID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyTaxTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyTaxTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAllByForeignKeyTaxTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@TaxTypeID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyTaxTypeID]
@TaxTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes]
FROM	[dbo].[PURPurchaseHeader]
WHERE
	[TaxTypeID] = @TaxTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyPaymentTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyPaymentTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAllByForeignKeyPaymentTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PaymentTypeID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyPaymentTypeID]
@PaymentTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes]
FROM	[dbo].[PURPurchaseHeader]
WHERE
	[PaymentTypeID] = @PaymentTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyRefuseReasonIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyRefuseReasonIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAllByForeignKeyRefuseReasonIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	:
		@RefuseReasonID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyRefuseReasonIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@RefuseReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseHeader]
			WHERE [RefuseReasonID] = @RefuseReasonID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeySupplierIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeySupplierIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAllByForeignKeySupplierIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	:
		@SupplierID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeySupplierIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@SupplierID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseHeader]
			WHERE [SupplierID] = @SupplierID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyTaxTypeIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyTaxTypeIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAllByForeignKeyTaxTypeIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	:
		@TaxTypeID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyTaxTypeIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@TaxTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseHeader]
			WHERE [TaxTypeID] = @TaxTypeID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyPaymentTypeIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyPaymentTypeIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_SelectAllByForeignKeyPaymentTypeIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	:
		@PaymentTypeID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_SelectAllByForeignKeyPaymentTypeIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@PaymentTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurcaseHeaderID],[PurchaseDate],[PaymentTypeID],[SupplierID],[InvoiceNumber],[CreateDate],[CreatedBy],[updateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[TotalPrice],[ServicePrice],[PaidAmount],[IsClosed],[IsVoid],[IsPrinted],[RefuseReasonID],[TotalDiscountAmount],[TotalDiscountRatio],[TaxTypeID],[RenainingAmount],[LastDayToPay],[DeletedBy],[Notes], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseHeader]
			WHERE [PaymentTypeID] = @PaymentTypeID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeyRefuseReasonID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeyRefuseReasonID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_DeleteAllByForeignKeyRefuseReasonID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@RefuseReasonID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeyRefuseReasonID]
@RefuseReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseHeader]
WHERE
	[RefuseReasonID] = @RefuseReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeySupplierID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeySupplierID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_DeleteAllByForeignKeySupplierID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@SupplierID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeySupplierID]
@SupplierID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseHeader]
WHERE
	[SupplierID] = @SupplierID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeyTaxTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeyTaxTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_DeleteAllByForeignKeyTaxTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@TaxTypeID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeyTaxTypeID]
@TaxTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseHeader]
WHERE
	[TaxTypeID] = @TaxTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeyPaymentTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeyPaymentTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseHeader_DeleteAllByForeignKeyPaymentTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:45 AM

INPUTS	: 
		@PaymentTypeID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseHeader_DeleteAllByForeignKeyPaymentTypeID]
@PaymentTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseHeader]
WHERE
	[PaymentTypeID] = @PaymentTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- INVProductStock.sql
-- 
-- history:   12/26/2014 2:45:46 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductID int  
		@TotalQty float  
		@StockTypeID int  
		@OpeningQty float  
		@OpennigDate datetime = null  
		@CreateDate datetime = null  
		@CreatedBy int = null  
		@UpdateDate datetime = null  
		@UpdatedBy int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVProductStock' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_Insert_WithDefaultValues]
@ProductID int , 
@TotalQty float , 
@StockTypeID int , 
@OpeningQty float , 
@OpennigDate datetime = null , 
@CreateDate datetime = null , 
@CreatedBy int = null , 
@UpdateDate datetime = null , 
@UpdatedBy int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVProductStock'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ProductID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @StockTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='StockTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @StockTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OpeningQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OpeningQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OpeningQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OpennigDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OpennigDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OpennigDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVProductStock]( [ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy] )
          VALUES ( @ProductID,@TotalQty,@StockTypeID,@OpeningQty,@OpennigDate,@CreateDate,@CreatedBy,@UpdateDate,@UpdatedBy )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVProductStock_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductStockID int = null  
		@ProductID int = null  
		@TotalQty float = null  
		@StockTypeID int = null  
		@OpeningQty float = null  
		@OpennigDate datetime = null  
		@CreateDate datetime = null  
		@CreatedBy int = null  
		@UpdateDate datetime = null  
		@UpdatedBy int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVProductStock' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_Insert_WithDefaultValues_AndReturn]
@ProductStockID int = null , 
@ProductID int = null , 
@TotalQty float = null , 
@StockTypeID int = null , 
@OpeningQty float = null , 
@OpennigDate datetime = null , 
@CreateDate datetime = null , 
@CreatedBy int = null , 
@UpdateDate datetime = null , 
@UpdatedBy int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVProductStock'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ProductID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @StockTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='StockTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @StockTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OpeningQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OpeningQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OpeningQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OpennigDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OpennigDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OpennigDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVProductStock]( [ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy] )
OUTPUT Inserted.*
VALUES (   @ProductID,@TotalQty,@StockTypeID,@OpeningQty,@OpennigDate,@CreateDate,@CreatedBy,@UpdateDate,@UpdatedBy  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductID int  
		@TotalQty float  
		@StockTypeID int  
		@OpeningQty float  
		@OpennigDate datetime = null  
		@CreateDate datetime = null  
		@CreatedBy int = null  
		@UpdateDate datetime = null  
		@UpdatedBy int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVProductStock' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_Insert]
@ProductID int , 
@TotalQty float , 
@StockTypeID int , 
@OpeningQty float , 
@OpennigDate datetime = null , 
@CreateDate datetime = null , 
@CreatedBy int = null , 
@UpdateDate datetime = null , 
@UpdatedBy int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVProductStock]( [ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy] )
          VALUES ( @ProductID,@TotalQty,@StockTypeID,@OpeningQty,@OpennigDate,@CreateDate,@CreatedBy,@UpdateDate,@UpdatedBy )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductStockID int  
		@ProductID int  
		@TotalQty float  
		@StockTypeID int  
		@OpeningQty float  
		@OpennigDate datetime = null  
		@CreateDate datetime = null  
		@CreatedBy int = null  
		@UpdateDate datetime = null  
		@UpdatedBy int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVProductStock' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_Update]
@ProductStockID int , 
@ProductID int , 
@TotalQty float , 
@StockTypeID int , 
@OpeningQty float , 
@OpennigDate datetime = null , 
@CreateDate datetime = null , 
@CreatedBy int = null , 
@UpdateDate datetime = null , 
@UpdatedBy int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVProductStock]
SET
	[ProductID] = @ProductID ,
	[TotalQty] = @TotalQty ,
	[StockTypeID] = @StockTypeID ,
	[OpeningQty] = @OpeningQty ,
	[OpennigDate] = @OpennigDate ,
	[CreateDate] = @CreateDate ,
	[CreatedBy] = @CreatedBy ,
	[UpdateDate] = @UpdateDate ,
	[UpdatedBy] = @UpdatedBy
WHERE
[ProductStockID] = @ProductStockID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductStockID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVProductStock' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_Delete]
@ProductStockID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVProductStock]
WHERE
[ProductStockID] = @ProductStockID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVProductStock'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVProductStock] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductStockID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_SelectByPrimaryKey]
@ProductStockID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[ProductStockID],[ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy]
FROM	[dbo].[INVProductStock]
WHERE
	[ProductStockID] = @ProductStockID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVProductStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[ProductStockID],[ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy]
			FROM	[dbo].[INVProductStock]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVProductStock'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVProductStock_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[ProductStockID],[ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVProductStock]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVProductStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [ProductStockID],[ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy]
			FROM [dbo].[INVProductStock] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [ProductStockID],[ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy]
			FROM [dbo].[INVProductStock] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVProductStock' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [ProductStockID],[ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVProductStock] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [ProductStockID],[ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVProductStock] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVProductStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVProductStock]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_SelectOneWithINVProductStockBatchUsingProductStockID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_SelectOneWithINVProductStockBatchUsingProductStockID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_SelectOneWithINVProductStockBatchUsingProductStockID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductStockID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStock' and also the respective child records from 'INVProductStockBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_SelectOneWithINVProductStockBatchUsingProductStockID]
@ProductStockID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_INVProductStock_SelectByPrimaryKey @ProductStockID = @ProductStockID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_INVProductStockBatch_SelectAllByForeignKeyProductStockID  @ProductStockID = @ProductStockID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_SelectAllByForeignKeyStockTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_SelectAllByForeignKeyStockTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_SelectAllByForeignKeyStockTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@StockTypeID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_SelectAllByForeignKeyStockTypeID]
@StockTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[ProductStockID],[ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy]
FROM	[dbo].[INVProductStock]
WHERE
	[StockTypeID] = @StockTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_SelectAllByForeignKeyStockTypeIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_SelectAllByForeignKeyStockTypeIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_SelectAllByForeignKeyStockTypeIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	:
		@StockTypeID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_SelectAllByForeignKeyStockTypeIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@StockTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[ProductStockID],[ProductID],[TotalQty],[StockTypeID],[OpeningQty],[OpennigDate],[CreateDate],[CreatedBy],[UpdateDate],[UpdatedBy], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[INVProductStock]
			WHERE [StockTypeID] = @StockTypeID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStock_DeleteAllByForeignKeyStockTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStock_DeleteAllByForeignKeyStockTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStock_DeleteAllByForeignKeyStockTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@StockTypeID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStock_DeleteAllByForeignKeyStockTypeID]
@StockTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[INVProductStock]
WHERE
	[StockTypeID] = @StockTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- ADUser.sql
-- 
-- history:   12/26/2014 2:45:46 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@UserFullName varchar (255)  
		@UserName varchar (50)  
		@Password varchar (50) = null  
		@GroupID int = null  
		@Email varchar (50) = null  
		@Address text = null  
		@Phone varchar (50) = null  
		@Mobile varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'ADUser' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_Insert_WithDefaultValues]
@UserFullName varchar (255) , 
@UserName varchar (50) , 
@Password varchar (50) = null , 
@GroupID int = null , 
@Email varchar (50) = null , 
@Address text = null , 
@Phone varchar (50) = null , 
@Mobile varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='ADUser'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @UserFullName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UserFullName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UserFullName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UserName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UserName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UserName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Password is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Password')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Password =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @GroupID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='GroupID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @GroupID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Email is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Email')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Email =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Address is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Address')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Address =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Phone is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Phone')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Phone =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Mobile is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Mobile')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Mobile =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[ADUser]( [UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile] )
          VALUES ( @UserFullName,@UserName,@Password,@GroupID,@Email,@Address,@Phone,@Mobile )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_ADUser_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@UserID int = null  
		@UserFullName varchar (255) = null  
		@UserName varchar (50) = null  
		@Password varchar (50) = null  
		@GroupID int = null  
		@Email varchar (50) = null  
		@Address text = null  
		@Phone varchar (50) = null  
		@Mobile varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'ADUser' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_ADUser_Insert_WithDefaultValues_AndReturn]
@UserID int = null , 
@UserFullName varchar (255) = null , 
@UserName varchar (50) = null , 
@Password varchar (50) = null , 
@GroupID int = null , 
@Email varchar (50) = null , 
@Address text = null , 
@Phone varchar (50) = null , 
@Mobile varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='ADUser'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @UserFullName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UserFullName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UserFullName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UserName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UserName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UserName =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Password is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Password')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Password =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @GroupID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='GroupID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @GroupID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Email is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Email')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Email =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Address is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Address')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Address =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Phone is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Phone')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Phone =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Mobile is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Mobile')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Mobile =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[ADUser]( [UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile] )
OUTPUT Inserted.*
VALUES (   @UserFullName,@UserName,@Password,@GroupID,@Email,@Address,@Phone,@Mobile  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@UserFullName varchar (255)  
		@UserName varchar (50)  
		@Password varchar (50) = null  
		@GroupID int = null  
		@Email varchar (50) = null  
		@Address text = null  
		@Phone varchar (50) = null  
		@Mobile varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'ADUser' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_Insert]
@UserFullName varchar (255) , 
@UserName varchar (50) , 
@Password varchar (50) = null , 
@GroupID int = null , 
@Email varchar (50) = null , 
@Address text = null , 
@Phone varchar (50) = null , 
@Mobile varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[ADUser]( [UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile] )
          VALUES ( @UserFullName,@UserName,@Password,@GroupID,@Email,@Address,@Phone,@Mobile )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@UserID int  
		@UserFullName varchar (255)  
		@UserName varchar (50)  
		@Password varchar (50) = null  
		@GroupID int = null  
		@Email varchar (50) = null  
		@Address text = null  
		@Phone varchar (50) = null  
		@Mobile varchar (50) = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'ADUser' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_Update]
@UserID int , 
@UserFullName varchar (255) , 
@UserName varchar (50) , 
@Password varchar (50) = null , 
@GroupID int = null , 
@Email varchar (50) = null , 
@Address text = null , 
@Phone varchar (50) = null , 
@Mobile varchar (50) = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[ADUser]
SET
	[UserFullName] = @UserFullName ,
	[UserName] = @UserName ,
	[Password] = @Password ,
	[GroupID] = @GroupID ,
	[Email] = @Email ,
	[Address] = @Address ,
	[Phone] = @Phone ,
	[Mobile] = @Mobile
WHERE
[UserID] = @UserID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@UserID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'ADUser' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_Delete]
@UserID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[ADUser]
WHERE
[UserID] = @UserID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'ADUser'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[ADUser] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@UserID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'ADUser' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_SelectByPrimaryKey]
@UserID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[UserID],[UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile]
FROM	[dbo].[ADUser]
WHERE
	[UserID] = @UserID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'ADUser' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[UserID],[UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile]
			FROM	[dbo].[ADUser]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'ADUser'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_ADUser_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[UserID],[UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[ADUser]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'ADUser' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [UserID],[UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile]
			FROM [dbo].[ADUser] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [UserID],[UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile]
			FROM [dbo].[ADUser] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'ADUser' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [UserID],[UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[ADUser] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [UserID],[UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[ADUser] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'ADUser' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[ADUser]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_SelectOneWithSALSalesHeaderUsingSellerID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_SelectOneWithSALSalesHeaderUsingSellerID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_SelectOneWithSALSalesHeaderUsingSellerID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@UserID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'ADUser' and also the respective child records from 'SALSalesHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_SelectOneWithSALSalesHeaderUsingSellerID]
@UserID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_ADUser_SelectByPrimaryKey @UserID = @UserID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_SALSalesHeader_SelectAllByForeignKeySellerID  @UserID = @UserID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_SelectAllByForeignKeyGroupID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_SelectAllByForeignKeyGroupID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_SelectAllByForeignKeyGroupID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@GroupID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'ADUser' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_SelectAllByForeignKeyGroupID]
@GroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[UserID],[UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile]
FROM	[dbo].[ADUser]
WHERE
	[GroupID] = @GroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_SelectAllByForeignKeyGroupIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_SelectAllByForeignKeyGroupIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_SelectAllByForeignKeyGroupIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	:
		@GroupID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'ADUser' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_SelectAllByForeignKeyGroupIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@GroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[UserID],[UserFullName],[UserName],[Password],[GroupID],[Email],[Address],[Phone],[Mobile], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[ADUser]
			WHERE [GroupID] = @GroupID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_ADUser_DeleteAllByForeignKeyGroupID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_ADUser_DeleteAllByForeignKeyGroupID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_ADUser_DeleteAllByForeignKeyGroupID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@GroupID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'ADUser' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_ADUser_DeleteAllByForeignKeyGroupID]
@GroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[ADUser]
WHERE
	[GroupID] = @GroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- BDProduct.sql
-- 
-- history:   12/26/2014 2:45:46 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductName varchar (255)  
		@ProductGroupID int = null  
		@ProductCode varchar (50) = null  
		@IsAcceptBatch bit  
		@ProductPrice float = null  
		@IsFixedPrice bit = null  
		@HasDiscount bit = null  
		@DiscountAmount float = null  
		@DescountRatio float = null  
		@IsActive bit = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDProduct' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_Insert_WithDefaultValues]
@ProductName varchar (255) , 
@ProductGroupID int = null , 
@ProductCode varchar (50) = null , 
@IsAcceptBatch bit , 
@ProductPrice float = null , 
@IsFixedPrice bit = null , 
@HasDiscount bit = null , 
@DiscountAmount float = null , 
@DescountRatio float = null , 
@IsActive bit = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='BDProduct'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ProductName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductGroupID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductGroupID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductGroupID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductCode is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductCode')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductCode =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsAcceptBatch is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsAcceptBatch')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsAcceptBatch =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductPrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductPrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductPrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsFixedPrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsFixedPrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsFixedPrice =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @HasDiscount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='HasDiscount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @HasDiscount =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DiscountAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DiscountAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DiscountAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DescountRatio is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DescountRatio')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DescountRatio =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsActive is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsActive')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsActive =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Notes is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Notes')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Notes =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDProduct]( [ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes] )
          VALUES ( @ProductName,@ProductGroupID,@ProductCode,@IsAcceptBatch,@ProductPrice,@IsFixedPrice,@HasDiscount,@DiscountAmount,@DescountRatio,@IsActive,@Notes )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_BDProduct_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductID int = null  
		@ProductName varchar (255) = null  
		@ProductGroupID int = null  
		@ProductCode varchar (50) = null  
		@IsAcceptBatch bit = null  
		@ProductPrice float = null  
		@IsFixedPrice bit = null  
		@HasDiscount bit = null  
		@DiscountAmount float = null  
		@DescountRatio float = null  
		@IsActive bit = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDProduct' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_Insert_WithDefaultValues_AndReturn]
@ProductID int = null , 
@ProductName varchar (255) = null , 
@ProductGroupID int = null , 
@ProductCode varchar (50) = null , 
@IsAcceptBatch bit = null , 
@ProductPrice float = null , 
@IsFixedPrice bit = null , 
@HasDiscount bit = null , 
@DiscountAmount float = null , 
@DescountRatio float = null , 
@IsActive bit = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='BDProduct'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ProductName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductGroupID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductGroupID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductGroupID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductCode is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductCode')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductCode =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsAcceptBatch is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsAcceptBatch')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsAcceptBatch =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductPrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductPrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductPrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsFixedPrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsFixedPrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsFixedPrice =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @HasDiscount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='HasDiscount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @HasDiscount =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DiscountAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DiscountAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DiscountAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DescountRatio is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DescountRatio')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DescountRatio =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsActive is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsActive')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsActive =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Notes is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Notes')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Notes =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[BDProduct]( [ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes] )
OUTPUT Inserted.*
VALUES (   @ProductName,@ProductGroupID,@ProductCode,@IsAcceptBatch,@ProductPrice,@IsFixedPrice,@HasDiscount,@DiscountAmount,@DescountRatio,@IsActive,@Notes  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductName varchar (255)  
		@ProductGroupID int = null  
		@ProductCode varchar (50) = null  
		@IsAcceptBatch bit  
		@ProductPrice float = null  
		@IsFixedPrice bit = null  
		@HasDiscount bit = null  
		@DiscountAmount float = null  
		@DescountRatio float = null  
		@IsActive bit = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'BDProduct' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_Insert]
@ProductName varchar (255) , 
@ProductGroupID int = null , 
@ProductCode varchar (50) = null , 
@IsAcceptBatch bit , 
@ProductPrice float = null , 
@IsFixedPrice bit = null , 
@HasDiscount bit = null , 
@DiscountAmount float = null , 
@DescountRatio float = null , 
@IsActive bit = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[BDProduct]( [ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes] )
          VALUES ( @ProductName,@ProductGroupID,@ProductCode,@IsAcceptBatch,@ProductPrice,@IsFixedPrice,@HasDiscount,@DiscountAmount,@DescountRatio,@IsActive,@Notes )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductID int  
		@ProductName varchar (255)  
		@ProductGroupID int = null  
		@ProductCode varchar (50) = null  
		@IsAcceptBatch bit  
		@ProductPrice float = null  
		@IsFixedPrice bit = null  
		@HasDiscount bit = null  
		@DiscountAmount float = null  
		@DescountRatio float = null  
		@IsActive bit = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'BDProduct' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_Update]
@ProductID int , 
@ProductName varchar (255) , 
@ProductGroupID int = null , 
@ProductCode varchar (50) = null , 
@IsAcceptBatch bit , 
@ProductPrice float = null , 
@IsFixedPrice bit = null , 
@HasDiscount bit = null , 
@DiscountAmount float = null , 
@DescountRatio float = null , 
@IsActive bit = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[BDProduct]
SET
	[ProductName] = @ProductName ,
	[ProductGroupID] = @ProductGroupID ,
	[ProductCode] = @ProductCode ,
	[IsAcceptBatch] = @IsAcceptBatch ,
	[ProductPrice] = @ProductPrice ,
	[IsFixedPrice] = @IsFixedPrice ,
	[HasDiscount] = @HasDiscount ,
	[DiscountAmount] = @DiscountAmount ,
	[DescountRatio] = @DescountRatio ,
	[IsActive] = @IsActive ,
	[Notes] = @Notes
WHERE
[ProductID] = @ProductID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'BDProduct' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_Delete]
@ProductID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[BDProduct]
WHERE
[ProductID] = @ProductID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'BDProduct'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[BDProduct] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProduct' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectByPrimaryKey]
@ProductID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes]
FROM	[dbo].[BDProduct]
WHERE
	[ProductID] = @ProductID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'BDProduct' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes]
			FROM	[dbo].[BDProduct]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'BDProduct'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_BDProduct_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[BDProduct]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'BDProduct' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes]
			FROM [dbo].[BDProduct] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes]
			FROM [dbo].[BDProduct] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'BDProduct' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[BDProduct] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[BDProduct] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'BDProduct' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[BDProduct]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectOneWithINVAdjustStockUsingProductID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectOneWithINVAdjustStockUsingProductID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectOneWithINVAdjustStockUsingProductID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProduct' and also the respective child records from 'INVAdjustStock'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectOneWithINVAdjustStockUsingProductID]
@ProductID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_BDProduct_SelectByPrimaryKey @ProductID = @ProductID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_INVAdjustStock_SelectAllByForeignKeyProductID  @ProductID = @ProductID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectOneWithPURPurchaseLineUsingProductID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectOneWithPURPurchaseLineUsingProductID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectOneWithPURPurchaseLineUsingProductID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProduct' and also the respective child records from 'PURPurchaseLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectOneWithPURPurchaseLineUsingProductID]
@ProductID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_BDProduct_SelectByPrimaryKey @ProductID = @ProductID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseLine_SelectAllByForeignKeyProductID  @ProductID = @ProductID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectAllByForeignKeyProductGroupID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductGroupID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProduct' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupID]
@ProductGroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes]
FROM	[dbo].[BDProduct]
WHERE
	[ProductGroupID] = @ProductGroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectAllByForeignKeyProductGroupID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductGroupID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProduct' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupID]
@ProductGroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes]
FROM	[dbo].[BDProduct]
WHERE
	[ProductGroupID] = @ProductGroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectAllByForeignKeyProductGroupIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	:
		@ProductGroupID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProduct' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@ProductGroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[BDProduct]
			WHERE [ProductGroupID] = @ProductGroupID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_SelectAllByForeignKeyProductGroupIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	:
		@ProductGroupID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProduct' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_SelectAllByForeignKeyProductGroupIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@ProductGroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[ProductID],[ProductName],[ProductGroupID],[ProductCode],[IsAcceptBatch],[ProductPrice],[IsFixedPrice],[HasDiscount],[DiscountAmount],[DescountRatio],[IsActive],[Notes], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[BDProduct]
			WHERE [ProductGroupID] = @ProductGroupID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_DeleteAllByForeignKeyProductGroupID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_DeleteAllByForeignKeyProductGroupID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_DeleteAllByForeignKeyProductGroupID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductGroupID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProduct' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_DeleteAllByForeignKeyProductGroupID]
@ProductGroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[BDProduct]
WHERE
	[ProductGroupID] = @ProductGroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_BDProduct_DeleteAllByForeignKeyProductGroupID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_BDProduct_DeleteAllByForeignKeyProductGroupID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_BDProduct_DeleteAllByForeignKeyProductGroupID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:46 AM

INPUTS	: 
		@ProductGroupID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'BDProduct' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_BDProduct_DeleteAllByForeignKeyProductGroupID]
@ProductGroupID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[BDProduct]
WHERE
	[ProductGroupID] = @ProductGroupID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- INVAdjustStock.sql
-- 
-- history:   12/26/2014 2:45:47 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductID int  
		@BatchID int = null  
		@Qty float  
		@AdjustReasonID int = null  
		@CreatedBy int = null  
		@CredateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVAdjustStock' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_Insert_WithDefaultValues]
@ProductID int , 
@BatchID int = null , 
@Qty float , 
@AdjustReasonID int = null , 
@CreatedBy int = null , 
@CredateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVAdjustStock'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ProductID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Qty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Qty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Qty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @AdjustReasonID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='AdjustReasonID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @AdjustReasonID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CredateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CredateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CredateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVAdjustStock]( [ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate] )
          VALUES ( @ProductID,@BatchID,@Qty,@AdjustReasonID,@CreatedBy,@CredateDate,@UpdatedBy,@UpdateDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVAdjustStock_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@AdjustStockID int = null  
		@ProductID int = null  
		@BatchID int = null  
		@Qty float = null  
		@AdjustReasonID int = null  
		@CreatedBy int = null  
		@CredateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVAdjustStock' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_Insert_WithDefaultValues_AndReturn]
@AdjustStockID int = null , 
@ProductID int = null , 
@BatchID int = null , 
@Qty float = null , 
@AdjustReasonID int = null , 
@CreatedBy int = null , 
@CredateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVAdjustStock'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ProductID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Qty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Qty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Qty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @AdjustReasonID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='AdjustReasonID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @AdjustReasonID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CredateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CredateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CredateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVAdjustStock]( [ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate] )
OUTPUT Inserted.*
VALUES (   @ProductID,@BatchID,@Qty,@AdjustReasonID,@CreatedBy,@CredateDate,@UpdatedBy,@UpdateDate  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductID int  
		@BatchID int = null  
		@Qty float  
		@AdjustReasonID int = null  
		@CreatedBy int = null  
		@CredateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVAdjustStock' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_Insert]
@ProductID int , 
@BatchID int = null , 
@Qty float , 
@AdjustReasonID int = null , 
@CreatedBy int = null , 
@CredateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVAdjustStock]( [ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate] )
          VALUES ( @ProductID,@BatchID,@Qty,@AdjustReasonID,@CreatedBy,@CredateDate,@UpdatedBy,@UpdateDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@AdjustStockID int  
		@ProductID int  
		@BatchID int = null  
		@Qty float  
		@AdjustReasonID int = null  
		@CreatedBy int = null  
		@CredateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVAdjustStock' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_Update]
@AdjustStockID int , 
@ProductID int , 
@BatchID int = null , 
@Qty float , 
@AdjustReasonID int = null , 
@CreatedBy int = null , 
@CredateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVAdjustStock]
SET
	[ProductID] = @ProductID ,
	[BatchID] = @BatchID ,
	[Qty] = @Qty ,
	[AdjustReasonID] = @AdjustReasonID ,
	[CreatedBy] = @CreatedBy ,
	[CredateDate] = @CredateDate ,
	[UpdatedBy] = @UpdatedBy ,
	[UpdateDate] = @UpdateDate
WHERE
[AdjustStockID] = @AdjustStockID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@AdjustStockID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVAdjustStock' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_Delete]
@AdjustStockID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVAdjustStock]
WHERE
[AdjustStockID] = @AdjustStockID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVAdjustStock'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVAdjustStock] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@AdjustStockID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectByPrimaryKey]
@AdjustStockID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate]
FROM	[dbo].[INVAdjustStock]
WHERE
	[AdjustStockID] = @AdjustStockID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate]
			FROM	[dbo].[INVAdjustStock]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVAdjustStock'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVAdjustStock_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVAdjustStock]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate]
			FROM [dbo].[INVAdjustStock] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate]
			FROM [dbo].[INVAdjustStock] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVAdjustStock' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVAdjustStock] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVAdjustStock] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVAdjustStock]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyProductID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyProductID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectAllByForeignKeyProductID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyProductID]
@ProductID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate]
FROM	[dbo].[INVAdjustStock]
WHERE
	[ProductID] = @ProductID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyAdjustReasonID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyAdjustReasonID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectAllByForeignKeyAdjustReasonID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@AdjustStockReasonID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyAdjustReasonID]
@AdjustStockReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate]
FROM	[dbo].[INVAdjustStock]
WHERE
	[AdjustReasonID] = @AdjustStockReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectAllByForeignKeyBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@BatchID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate]
FROM	[dbo].[INVAdjustStock]
WHERE
	[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyProductIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyProductIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectAllByForeignKeyProductIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	:
		@ProductID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyProductIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@ProductID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[INVAdjustStock]
			WHERE [ProductID] = @ProductID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyAdjustReasonIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyAdjustReasonIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectAllByForeignKeyAdjustReasonIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	:
		@AdjustStockReasonID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyAdjustReasonIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@AdjustStockReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[INVAdjustStock]
			WHERE [AdjustReasonID] = @AdjustStockReasonID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyBatchIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyBatchIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_SelectAllByForeignKeyBatchIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	:
		@BatchID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_SelectAllByForeignKeyBatchIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[AdjustStockID],[ProductID],[BatchID],[Qty],[AdjustReasonID],[CreatedBy],[CredateDate],[UpdatedBy],[UpdateDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[INVAdjustStock]
			WHERE [BatchID] = @BatchID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_DeleteAllByForeignKeyProductID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_DeleteAllByForeignKeyProductID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_DeleteAllByForeignKeyProductID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_DeleteAllByForeignKeyProductID]
@ProductID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[INVAdjustStock]
WHERE
	[ProductID] = @ProductID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_DeleteAllByForeignKeyAdjustReasonID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_DeleteAllByForeignKeyAdjustReasonID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_DeleteAllByForeignKeyAdjustReasonID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@AdjustStockReasonID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_DeleteAllByForeignKeyAdjustReasonID]
@AdjustStockReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[INVAdjustStock]
WHERE
	[AdjustReasonID] = @AdjustStockReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVAdjustStock_DeleteAllByForeignKeyBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVAdjustStock_DeleteAllByForeignKeyBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVAdjustStock_DeleteAllByForeignKeyBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@BatchID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVAdjustStock' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVAdjustStock_DeleteAllByForeignKeyBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[INVAdjustStock]
WHERE
	[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- INVProductStockBatch.sql
-- 
-- history:   12/26/2014 2:45:47 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductStockID int  
		@BatchID int  
		@Qty float  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVProductStockBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_Insert_WithDefaultValues]
@ProductStockID int , 
@BatchID int , 
@Qty float , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVProductStockBatch'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ProductStockID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductStockID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductStockID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Qty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Qty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Qty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVProductStockBatch]( [ProductStockID],[BatchID],[Qty] )
          VALUES ( @ProductStockID,@BatchID,@Qty )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVProductStockBatch_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductStockBatchID int = null  
		@ProductStockID int = null  
		@BatchID int = null  
		@Qty float = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVProductStockBatch' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_Insert_WithDefaultValues_AndReturn]
@ProductStockBatchID int = null , 
@ProductStockID int = null , 
@BatchID int = null , 
@Qty float = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVProductStockBatch'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ProductStockID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductStockID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductStockID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Qty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Qty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Qty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVProductStockBatch]( [ProductStockID],[BatchID],[Qty] )
OUTPUT Inserted.*
VALUES (   @ProductStockID,@BatchID,@Qty  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductStockID int  
		@BatchID int  
		@Qty float  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVProductStockBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_Insert]
@ProductStockID int , 
@BatchID int , 
@Qty float , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVProductStockBatch]( [ProductStockID],[BatchID],[Qty] )
          VALUES ( @ProductStockID,@BatchID,@Qty )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductStockBatchID int  
		@ProductStockID int  
		@BatchID int  
		@Qty float  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVProductStockBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_Update]
@ProductStockBatchID int , 
@ProductStockID int , 
@BatchID int , 
@Qty float , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVProductStockBatch]
SET
	[ProductStockID] = @ProductStockID ,
	[BatchID] = @BatchID ,
	[Qty] = @Qty
WHERE
[ProductStockBatchID] = @ProductStockBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductStockBatchID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVProductStockBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_Delete]
@ProductStockBatchID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVProductStockBatch]
WHERE
[ProductStockBatchID] = @ProductStockBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVProductStockBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVProductStockBatch] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductStockBatchID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStockBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_SelectByPrimaryKey]
@ProductStockBatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[ProductStockBatchID],[ProductStockID],[BatchID],[Qty]
FROM	[dbo].[INVProductStockBatch]
WHERE
	[ProductStockBatchID] = @ProductStockBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVProductStockBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[ProductStockBatchID],[ProductStockID],[BatchID],[Qty]
			FROM	[dbo].[INVProductStockBatch]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVProductStockBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVProductStockBatch_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[ProductStockBatchID],[ProductStockID],[BatchID],[Qty], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVProductStockBatch]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVProductStockBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [ProductStockBatchID],[ProductStockID],[BatchID],[Qty]
			FROM [dbo].[INVProductStockBatch] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [ProductStockBatchID],[ProductStockID],[BatchID],[Qty]
			FROM [dbo].[INVProductStockBatch] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVProductStockBatch' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [ProductStockBatchID],[ProductStockID],[BatchID],[Qty], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVProductStockBatch] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [ProductStockBatchID],[ProductStockID],[BatchID],[Qty], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVProductStockBatch] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVProductStockBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVProductStockBatch]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_SelectAllByForeignKeyBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@BatchID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStockBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[ProductStockBatchID],[ProductStockID],[BatchID],[Qty]
FROM	[dbo].[INVProductStockBatch]
WHERE
	[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyProductStockID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyProductStockID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_SelectAllByForeignKeyProductStockID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductStockID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStockBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyProductStockID]
@ProductStockID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[ProductStockBatchID],[ProductStockID],[BatchID],[Qty]
FROM	[dbo].[INVProductStockBatch]
WHERE
	[ProductStockID] = @ProductStockID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyBatchIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyBatchIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_SelectAllByForeignKeyBatchIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	:
		@BatchID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStockBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyBatchIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[ProductStockBatchID],[ProductStockID],[BatchID],[Qty], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[INVProductStockBatch]
			WHERE [BatchID] = @BatchID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyProductStockIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyProductStockIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_SelectAllByForeignKeyProductStockIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	:
		@ProductStockID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStockBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_SelectAllByForeignKeyProductStockIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@ProductStockID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[ProductStockBatchID],[ProductStockID],[BatchID],[Qty], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[INVProductStockBatch]
			WHERE [ProductStockID] = @ProductStockID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_DeleteAllByForeignKeyBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_DeleteAllByForeignKeyBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_DeleteAllByForeignKeyBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@BatchID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStockBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_DeleteAllByForeignKeyBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[INVProductStockBatch]
WHERE
	[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVProductStockBatch_DeleteAllByForeignKeyProductStockID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVProductStockBatch_DeleteAllByForeignKeyProductStockID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVProductStockBatch_DeleteAllByForeignKeyProductStockID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductStockID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVProductStockBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVProductStockBatch_DeleteAllByForeignKeyProductStockID]
@ProductStockID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[INVProductStockBatch]
WHERE
	[ProductStockID] = @ProductStockID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- PURPurchaseLine.sql
-- 
-- history:   12/26/2014 2:45:47 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurchaseHeaderID int  
		@ProductID int  
		@TotalQty float  
		@BonusQty float  
		@DiscountRatio float  
		@DiscountAmount float  
		@Unitprice float  
		@CreatedDate datetime = null  
		@CreatedBy int = null  
		@UpdateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit  
		@DeleteDate datetime = null  
		@DeletedBy int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_Insert_WithDefaultValues]
@PurchaseHeaderID int , 
@ProductID int , 
@TotalQty float , 
@BonusQty float , 
@DiscountRatio float , 
@DiscountAmount float , 
@Unitprice float , 
@CreatedDate datetime = null , 
@CreatedBy int = null , 
@UpdateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit , 
@DeleteDate datetime = null , 
@DeletedBy int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='PURPurchaseLine'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @PurchaseHeaderID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PurchaseHeaderID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PurchaseHeaderID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BonusQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BonusQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BonusQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DiscountRatio is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DiscountRatio')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DiscountRatio =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DiscountAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DiscountAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DiscountAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Unitprice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Unitprice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Unitprice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[PURPurchaseLine]( [PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy] )
          VALUES ( @PurchaseHeaderID,@ProductID,@TotalQty,@BonusQty,@DiscountRatio,@DiscountAmount,@Unitprice,@CreatedDate,@CreatedBy,@UpdateDate,@UpdatedBy,@IsDeleted,@DeleteDate,@DeletedBy )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_PURPurchaseLine_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurchaseLineID int = null  
		@PurchaseHeaderID int = null  
		@ProductID int = null  
		@TotalQty float = null  
		@BonusQty float = null  
		@DiscountRatio float = null  
		@DiscountAmount float = null  
		@Unitprice float = null  
		@CreatedDate datetime = null  
		@CreatedBy int = null  
		@UpdateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit = null  
		@DeleteDate datetime = null  
		@DeletedBy int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseLine' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_Insert_WithDefaultValues_AndReturn]
@PurchaseLineID int = null , 
@PurchaseHeaderID int = null , 
@ProductID int = null , 
@TotalQty float = null , 
@BonusQty float = null , 
@DiscountRatio float = null , 
@DiscountAmount float = null , 
@Unitprice float = null , 
@CreatedDate datetime = null , 
@CreatedBy int = null , 
@UpdateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit = null , 
@DeleteDate datetime = null , 
@DeletedBy int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='PURPurchaseLine'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @PurchaseHeaderID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PurchaseHeaderID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PurchaseHeaderID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ProductID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ProductID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ProductID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BonusQty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BonusQty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BonusQty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DiscountRatio is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DiscountRatio')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DiscountRatio =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DiscountAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DiscountAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DiscountAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Unitprice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Unitprice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Unitprice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[PURPurchaseLine]( [PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy] )
OUTPUT Inserted.*
VALUES (   @PurchaseHeaderID,@ProductID,@TotalQty,@BonusQty,@DiscountRatio,@DiscountAmount,@Unitprice,@CreatedDate,@CreatedBy,@UpdateDate,@UpdatedBy,@IsDeleted,@DeleteDate,@DeletedBy  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurchaseHeaderID int  
		@ProductID int  
		@TotalQty float  
		@BonusQty float  
		@DiscountRatio float  
		@DiscountAmount float  
		@Unitprice float  
		@CreatedDate datetime = null  
		@CreatedBy int = null  
		@UpdateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit  
		@DeleteDate datetime = null  
		@DeletedBy int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_Insert]
@PurchaseHeaderID int , 
@ProductID int , 
@TotalQty float , 
@BonusQty float , 
@DiscountRatio float , 
@DiscountAmount float , 
@Unitprice float , 
@CreatedDate datetime = null , 
@CreatedBy int = null , 
@UpdateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit , 
@DeleteDate datetime = null , 
@DeletedBy int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[PURPurchaseLine]( [PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy] )
          VALUES ( @PurchaseHeaderID,@ProductID,@TotalQty,@BonusQty,@DiscountRatio,@DiscountAmount,@Unitprice,@CreatedDate,@CreatedBy,@UpdateDate,@UpdatedBy,@IsDeleted,@DeleteDate,@DeletedBy )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurchaseLineID int  
		@PurchaseHeaderID int  
		@ProductID int  
		@TotalQty float  
		@BonusQty float  
		@DiscountRatio float  
		@DiscountAmount float  
		@Unitprice float  
		@CreatedDate datetime = null  
		@CreatedBy int = null  
		@UpdateDate datetime = null  
		@UpdatedBy int = null  
		@IsDeleted bit  
		@DeleteDate datetime = null  
		@DeletedBy int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'PURPurchaseLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_Update]
@PurchaseLineID int , 
@PurchaseHeaderID int , 
@ProductID int , 
@TotalQty float , 
@BonusQty float , 
@DiscountRatio float , 
@DiscountAmount float , 
@Unitprice float , 
@CreatedDate datetime = null , 
@CreatedBy int = null , 
@UpdateDate datetime = null , 
@UpdatedBy int = null , 
@IsDeleted bit , 
@DeleteDate datetime = null , 
@DeletedBy int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[PURPurchaseLine]
SET
	[PurchaseHeaderID] = @PurchaseHeaderID ,
	[ProductID] = @ProductID ,
	[TotalQty] = @TotalQty ,
	[BonusQty] = @BonusQty ,
	[DiscountRatio] = @DiscountRatio ,
	[DiscountAmount] = @DiscountAmount ,
	[Unitprice] = @Unitprice ,
	[CreatedDate] = @CreatedDate ,
	[CreatedBy] = @CreatedBy ,
	[UpdateDate] = @UpdateDate ,
	[UpdatedBy] = @UpdatedBy ,
	[IsDeleted] = @IsDeleted ,
	[DeleteDate] = @DeleteDate ,
	[DeletedBy] = @DeletedBy
WHERE
[PurchaseLineID] = @PurchaseLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurchaseLineID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'PURPurchaseLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_Delete]
@PurchaseLineID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[PURPurchaseLine]
WHERE
[PurchaseLineID] = @PurchaseLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'PURPurchaseLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[PURPurchaseLine] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurchaseLineID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectByPrimaryKey]
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy]
FROM	[dbo].[PURPurchaseLine]
WHERE
	[PurchaseLineID] = @PurchaseLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'PURPurchaseLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy]
			FROM	[dbo].[PURPurchaseLine]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'PURPurchaseLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_PURPurchaseLine_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[PURPurchaseLine]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'PURPurchaseLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy]
			FROM [dbo].[PURPurchaseLine] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy]
			FROM [dbo].[PURPurchaseLine] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'PURPurchaseLine' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[PURPurchaseLine] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[PURPurchaseLine] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'PURPurchaseLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[PURPurchaseLine]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectOneWithINVTakingInventoryLineBatchUsingTakingLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectOneWithINVTakingInventoryLineBatchUsingTakingLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectOneWithINVTakingInventoryLineBatchUsingTakingLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurchaseLineID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLine' and also the respective child records from 'INVTakingInventoryLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectOneWithINVTakingInventoryLineBatchUsingTakingLineID]
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_PURPurchaseLine_SelectByPrimaryKey @PurchaseLineID = @PurchaseLineID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_INVTakingInventoryLineBatch_SelectAllByForeignKeyTakingLineID  @PurchaseLineID = @PurchaseLineID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectOneWithPURPurchaseLineBatchUsingPurchaseLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectOneWithPURPurchaseLineBatchUsingPurchaseLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectOneWithPURPurchaseLineBatchUsingPurchaseLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurchaseLineID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLine' and also the respective child records from 'PURPurchaseLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectOneWithPURPurchaseLineBatchUsingPurchaseLineID]
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_PURPurchaseLine_SelectByPrimaryKey @PurchaseLineID = @PurchaseLineID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseLineBatch_SelectAllByForeignKeyPurchaseLineID  @PurchaseLineID = @PurchaseLineID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectOneWithPURPurchaseReturnLineUsingOriginalpurchaseLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectOneWithPURPurchaseReturnLineUsingOriginalpurchaseLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectOneWithPURPurchaseReturnLineUsingOriginalpurchaseLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurchaseLineID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLine' and also the respective child records from 'PURPurchaseReturnLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectOneWithPURPurchaseReturnLineUsingOriginalpurchaseLineID]
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_PURPurchaseLine_SelectByPrimaryKey @PurchaseLineID = @PurchaseLineID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseReturnLine_SelectAllByForeignKeyOriginalpurchaseLineID  @PurchaseLineID = @PurchaseLineID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyProductID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyProductID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectAllByForeignKeyProductID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyProductID]
@ProductID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy]
FROM	[dbo].[PURPurchaseLine]
WHERE
	[ProductID] = @ProductID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyPurchaseHeaderID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyPurchaseHeaderID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectAllByForeignKeyPurchaseHeaderID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurcaseHeaderID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyPurchaseHeaderID]
@PurcaseHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy]
FROM	[dbo].[PURPurchaseLine]
WHERE
	[PurchaseHeaderID] = @PurcaseHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyProductIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyProductIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectAllByForeignKeyProductIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	:
		@ProductID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyProductIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@ProductID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseLine]
			WHERE [ProductID] = @ProductID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyPurchaseHeaderIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyPurchaseHeaderIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_SelectAllByForeignKeyPurchaseHeaderIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	:
		@PurcaseHeaderID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_SelectAllByForeignKeyPurchaseHeaderIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@PurcaseHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurchaseLineID],[PurchaseHeaderID],[ProductID],[TotalQty],[BonusQty],[DiscountRatio],[DiscountAmount],[Unitprice],[CreatedDate],[CreatedBy],[UpdateDate],[UpdatedBy],[IsDeleted],[DeleteDate],[DeletedBy], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseLine]
			WHERE [PurchaseHeaderID] = @PurcaseHeaderID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_DeleteAllByForeignKeyProductID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_DeleteAllByForeignKeyProductID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_DeleteAllByForeignKeyProductID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@ProductID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_DeleteAllByForeignKeyProductID]
@ProductID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseLine]
WHERE
	[ProductID] = @ProductID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLine_DeleteAllByForeignKeyPurchaseHeaderID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLine_DeleteAllByForeignKeyPurchaseHeaderID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLine_DeleteAllByForeignKeyPurchaseHeaderID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:47 AM

INPUTS	: 
		@PurcaseHeaderID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLine_DeleteAllByForeignKeyPurchaseHeaderID]
@PurcaseHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseLine]
WHERE
	[PurchaseHeaderID] = @PurcaseHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- PURPurchaseReturnHeader.sql
-- 
-- history:   12/26/2014 2:45:48 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@ReturnDate datetime  
		@OriginalHeaderID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy varchar (10) = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseReturnHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_Insert_WithDefaultValues]
@ReturnDate datetime , 
@OriginalHeaderID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy varchar (10) = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='PURPurchaseReturnHeader'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ReturnDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ReturnDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ReturnDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OriginalHeaderID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OriginalHeaderID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OriginalHeaderID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( varchar (10),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[PURPurchaseReturnHeader]( [ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
          VALUES ( @ReturnDate,@OriginalHeaderID,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_PURPurchaseReturnHeader_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@PurchaseReturnID int = null  
		@ReturnDate datetime = null  
		@OriginalHeaderID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit = null  
		@DeletedBy varchar (10) = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseReturnHeader' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_Insert_WithDefaultValues_AndReturn]
@PurchaseReturnID int = null , 
@ReturnDate datetime = null , 
@OriginalHeaderID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit = null , 
@DeletedBy varchar (10) = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='PURPurchaseReturnHeader'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @ReturnDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ReturnDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ReturnDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OriginalHeaderID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OriginalHeaderID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OriginalHeaderID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( varchar (10),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeleteDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeleteDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeleteDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[PURPurchaseReturnHeader]( [ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
OUTPUT Inserted.*
VALUES (   @ReturnDate,@OriginalHeaderID,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@ReturnDate datetime  
		@OriginalHeaderID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy varchar (10) = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseReturnHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_Insert]
@ReturnDate datetime , 
@OriginalHeaderID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy varchar (10) = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[PURPurchaseReturnHeader]( [ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate] )
          VALUES ( @ReturnDate,@OriginalHeaderID,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeleteDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@PurchaseReturnID int  
		@ReturnDate datetime  
		@OriginalHeaderID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy varchar (10) = null  
		@DeleteDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'PURPurchaseReturnHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_Update]
@PurchaseReturnID int , 
@ReturnDate datetime , 
@OriginalHeaderID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy varchar (10) = null , 
@DeleteDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[PURPurchaseReturnHeader]
SET
	[ReturnDate] = @ReturnDate ,
	[OriginalHeaderID] = @OriginalHeaderID ,
	[CreatedBy] = @CreatedBy ,
	[CreateDate] = @CreateDate ,
	[UpdatedBy] = @UpdatedBy ,
	[UpdateDate] = @UpdateDate ,
	[IsDeleted] = @IsDeleted ,
	[DeletedBy] = @DeletedBy ,
	[DeleteDate] = @DeleteDate
WHERE
[PurchaseReturnID] = @PurchaseReturnID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@PurchaseReturnID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'PURPurchaseReturnHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_Delete]
@PurchaseReturnID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[PURPurchaseReturnHeader]
WHERE
[PurchaseReturnID] = @PurchaseReturnID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'PURPurchaseReturnHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[PURPurchaseReturnHeader] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@PurchaseReturnID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_SelectByPrimaryKey]
@PurchaseReturnID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseReturnID],[ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
FROM	[dbo].[PURPurchaseReturnHeader]
WHERE
	[PurchaseReturnID] = @PurchaseReturnID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'PURPurchaseReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[PurchaseReturnID],[ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM	[dbo].[PURPurchaseReturnHeader]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'PURPurchaseReturnHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_PURPurchaseReturnHeader_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[PurchaseReturnID],[ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[PURPurchaseReturnHeader]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'PURPurchaseReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [PurchaseReturnID],[ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM [dbo].[PURPurchaseReturnHeader] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [PurchaseReturnID],[ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
			FROM [dbo].[PURPurchaseReturnHeader] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'PURPurchaseReturnHeader' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [PurchaseReturnID],[ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[PURPurchaseReturnHeader] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [PurchaseReturnID],[ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[PURPurchaseReturnHeader] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'PURPurchaseReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[PURPurchaseReturnHeader]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_SelectAllByForeignKeyOriginalHeaderID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_SelectAllByForeignKeyOriginalHeaderID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_SelectAllByForeignKeyOriginalHeaderID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@PurcaseHeaderID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_SelectAllByForeignKeyOriginalHeaderID]
@PurcaseHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseReturnID],[ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate]
FROM	[dbo].[PURPurchaseReturnHeader]
WHERE
	[OriginalHeaderID] = @PurcaseHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_SelectAllByForeignKeyOriginalHeaderIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_SelectAllByForeignKeyOriginalHeaderIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_SelectAllByForeignKeyOriginalHeaderIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	:
		@PurcaseHeaderID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_SelectAllByForeignKeyOriginalHeaderIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@PurcaseHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurchaseReturnID],[ReturnDate],[OriginalHeaderID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeleteDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseReturnHeader]
			WHERE [OriginalHeaderID] = @PurcaseHeaderID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnHeader_DeleteAllByForeignKeyOriginalHeaderID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnHeader_DeleteAllByForeignKeyOriginalHeaderID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnHeader_DeleteAllByForeignKeyOriginalHeaderID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@PurcaseHeaderID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnHeader_DeleteAllByForeignKeyOriginalHeaderID]
@PurcaseHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseReturnHeader]
WHERE
	[OriginalHeaderID] = @PurcaseHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- SALSalesHeader.sql
-- 
-- history:   12/26/2014 2:45:48 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@SalesDate datetime  
		@CustomerID int  
		@InvoiceNumber varchar (50) = null  
		@InvoiceDate datetime = null  
		@SellerID int = null  
		@PaymentTypeID int = null  
		@TotalPrice float  
		@PaidAmount float  
		@RemainingAmount float  
		@LastDayToPay datetime = null  
		@TotalDiscountAmount float  
		@TotalDiscountRatio float  
		@IsClosed bit  
		@IsVoid bit  
		@IsPrinted bit  
		@ServicePrice float  
		@TaxTypeID int = null  
		@RefuseReasonID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeletDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_Insert_WithDefaultValues]
@SalesDate datetime , 
@CustomerID int , 
@InvoiceNumber varchar (50) = null , 
@InvoiceDate datetime = null , 
@SellerID int = null , 
@PaymentTypeID int = null , 
@TotalPrice float , 
@PaidAmount float , 
@RemainingAmount float , 
@LastDayToPay datetime = null , 
@TotalDiscountAmount float , 
@TotalDiscountRatio float , 
@IsClosed bit , 
@IsVoid bit , 
@IsPrinted bit , 
@ServicePrice float , 
@TaxTypeID int = null , 
@RefuseReasonID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeletDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='SALSalesHeader'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @SalesDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SalesDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SalesDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CustomerID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CustomerID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CustomerID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @InvoiceNumber is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='InvoiceNumber')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @InvoiceNumber =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @InvoiceDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='InvoiceDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @InvoiceDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @SellerID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SellerID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SellerID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @PaymentTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaymentTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaymentTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalPrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalPrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalPrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @PaidAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaidAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaidAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RemainingAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RemainingAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RemainingAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @LastDayToPay is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='LastDayToPay')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @LastDayToPay =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalDiscountAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalDiscountAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalDiscountAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalDiscountRatio is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalDiscountRatio')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalDiscountRatio =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsClosed is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsClosed')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsClosed =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsVoid is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsVoid')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsVoid =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsPrinted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsPrinted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsPrinted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ServicePrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ServicePrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ServicePrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TaxTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TaxTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TaxTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RefuseReasonID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RefuseReasonID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RefuseReasonID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[SALSalesHeader]( [SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate] )
          VALUES ( @SalesDate,@CustomerID,@InvoiceNumber,@InvoiceDate,@SellerID,@PaymentTypeID,@TotalPrice,@PaidAmount,@RemainingAmount,@LastDayToPay,@TotalDiscountAmount,@TotalDiscountRatio,@IsClosed,@IsVoid,@IsPrinted,@ServicePrice,@TaxTypeID,@RefuseReasonID,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeletDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_SALSalesHeader_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@SalesHeaderID int = null  
		@SalesDate datetime = null  
		@CustomerID int = null  
		@InvoiceNumber varchar (50) = null  
		@InvoiceDate datetime = null  
		@SellerID int = null  
		@PaymentTypeID int = null  
		@TotalPrice float = null  
		@PaidAmount float = null  
		@RemainingAmount float = null  
		@LastDayToPay datetime = null  
		@TotalDiscountAmount float = null  
		@TotalDiscountRatio float = null  
		@IsClosed bit = null  
		@IsVoid bit = null  
		@IsPrinted bit = null  
		@ServicePrice float = null  
		@TaxTypeID int = null  
		@RefuseReasonID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit = null  
		@DeletedBy int = null  
		@DeletDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesHeader' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_Insert_WithDefaultValues_AndReturn]
@SalesHeaderID int = null , 
@SalesDate datetime = null , 
@CustomerID int = null , 
@InvoiceNumber varchar (50) = null , 
@InvoiceDate datetime = null , 
@SellerID int = null , 
@PaymentTypeID int = null , 
@TotalPrice float = null , 
@PaidAmount float = null , 
@RemainingAmount float = null , 
@LastDayToPay datetime = null , 
@TotalDiscountAmount float = null , 
@TotalDiscountRatio float = null , 
@IsClosed bit = null , 
@IsVoid bit = null , 
@IsPrinted bit = null , 
@ServicePrice float = null , 
@TaxTypeID int = null , 
@RefuseReasonID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit = null , 
@DeletedBy int = null , 
@DeletDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='SALSalesHeader'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @SalesDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SalesDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SalesDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CustomerID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CustomerID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CustomerID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @InvoiceNumber is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='InvoiceNumber')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @InvoiceNumber =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @InvoiceDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='InvoiceDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @InvoiceDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @SellerID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='SellerID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @SellerID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @PaymentTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaymentTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaymentTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalPrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalPrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalPrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @PaidAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PaidAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PaidAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RemainingAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RemainingAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RemainingAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @LastDayToPay is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='LastDayToPay')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @LastDayToPay =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalDiscountAmount is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalDiscountAmount')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalDiscountAmount =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TotalDiscountRatio is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TotalDiscountRatio')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TotalDiscountRatio =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsClosed is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsClosed')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsClosed =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsVoid is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsVoid')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsVoid =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsPrinted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsPrinted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsPrinted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ServicePrice is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ServicePrice')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ServicePrice =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @TaxTypeID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TaxTypeID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TaxTypeID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @RefuseReasonID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='RefuseReasonID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @RefuseReasonID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @CreateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='CreateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @CreateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdatedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdatedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdatedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @UpdateDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='UpdateDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @UpdateDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @IsDeleted is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='IsDeleted')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @IsDeleted =  convert ( bit,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletedBy is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletedBy')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletedBy =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @DeletDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='DeletDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @DeletDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[SALSalesHeader]( [SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate] )
OUTPUT Inserted.*
VALUES (   @SalesDate,@CustomerID,@InvoiceNumber,@InvoiceDate,@SellerID,@PaymentTypeID,@TotalPrice,@PaidAmount,@RemainingAmount,@LastDayToPay,@TotalDiscountAmount,@TotalDiscountRatio,@IsClosed,@IsVoid,@IsPrinted,@ServicePrice,@TaxTypeID,@RefuseReasonID,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeletDate  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@SalesDate datetime  
		@CustomerID int  
		@InvoiceNumber varchar (50) = null  
		@InvoiceDate datetime = null  
		@SellerID int = null  
		@PaymentTypeID int = null  
		@TotalPrice float  
		@PaidAmount float  
		@RemainingAmount float  
		@LastDayToPay datetime = null  
		@TotalDiscountAmount float  
		@TotalDiscountRatio float  
		@IsClosed bit  
		@IsVoid bit  
		@IsPrinted bit  
		@ServicePrice float  
		@TaxTypeID int = null  
		@RefuseReasonID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeletDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'SALSalesHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_Insert]
@SalesDate datetime , 
@CustomerID int , 
@InvoiceNumber varchar (50) = null , 
@InvoiceDate datetime = null , 
@SellerID int = null , 
@PaymentTypeID int = null , 
@TotalPrice float , 
@PaidAmount float , 
@RemainingAmount float , 
@LastDayToPay datetime = null , 
@TotalDiscountAmount float , 
@TotalDiscountRatio float , 
@IsClosed bit , 
@IsVoid bit , 
@IsPrinted bit , 
@ServicePrice float , 
@TaxTypeID int = null , 
@RefuseReasonID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeletDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[SALSalesHeader]( [SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate] )
          VALUES ( @SalesDate,@CustomerID,@InvoiceNumber,@InvoiceDate,@SellerID,@PaymentTypeID,@TotalPrice,@PaidAmount,@RemainingAmount,@LastDayToPay,@TotalDiscountAmount,@TotalDiscountRatio,@IsClosed,@IsVoid,@IsPrinted,@ServicePrice,@TaxTypeID,@RefuseReasonID,@CreatedBy,@CreateDate,@UpdatedBy,@UpdateDate,@IsDeleted,@DeletedBy,@DeletDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@SalesHeaderID int  
		@SalesDate datetime  
		@CustomerID int  
		@InvoiceNumber varchar (50) = null  
		@InvoiceDate datetime = null  
		@SellerID int = null  
		@PaymentTypeID int = null  
		@TotalPrice float  
		@PaidAmount float  
		@RemainingAmount float  
		@LastDayToPay datetime = null  
		@TotalDiscountAmount float  
		@TotalDiscountRatio float  
		@IsClosed bit  
		@IsVoid bit  
		@IsPrinted bit  
		@ServicePrice float  
		@TaxTypeID int = null  
		@RefuseReasonID int = null  
		@CreatedBy int = null  
		@CreateDate datetime = null  
		@UpdatedBy int = null  
		@UpdateDate datetime = null  
		@IsDeleted bit  
		@DeletedBy int = null  
		@DeletDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'SALSalesHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_Update]
@SalesHeaderID int , 
@SalesDate datetime , 
@CustomerID int , 
@InvoiceNumber varchar (50) = null , 
@InvoiceDate datetime = null , 
@SellerID int = null , 
@PaymentTypeID int = null , 
@TotalPrice float , 
@PaidAmount float , 
@RemainingAmount float , 
@LastDayToPay datetime = null , 
@TotalDiscountAmount float , 
@TotalDiscountRatio float , 
@IsClosed bit , 
@IsVoid bit , 
@IsPrinted bit , 
@ServicePrice float , 
@TaxTypeID int = null , 
@RefuseReasonID int = null , 
@CreatedBy int = null , 
@CreateDate datetime = null , 
@UpdatedBy int = null , 
@UpdateDate datetime = null , 
@IsDeleted bit , 
@DeletedBy int = null , 
@DeletDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[SALSalesHeader]
SET
	[SalesDate] = @SalesDate ,
	[CustomerID] = @CustomerID ,
	[InvoiceNumber] = @InvoiceNumber ,
	[InvoiceDate] = @InvoiceDate ,
	[SellerID] = @SellerID ,
	[PaymentTypeID] = @PaymentTypeID ,
	[TotalPrice] = @TotalPrice ,
	[PaidAmount] = @PaidAmount ,
	[RemainingAmount] = @RemainingAmount ,
	[LastDayToPay] = @LastDayToPay ,
	[TotalDiscountAmount] = @TotalDiscountAmount ,
	[TotalDiscountRatio] = @TotalDiscountRatio ,
	[IsClosed] = @IsClosed ,
	[IsVoid] = @IsVoid ,
	[IsPrinted] = @IsPrinted ,
	[ServicePrice] = @ServicePrice ,
	[TaxTypeID] = @TaxTypeID ,
	[RefuseReasonID] = @RefuseReasonID ,
	[CreatedBy] = @CreatedBy ,
	[CreateDate] = @CreateDate ,
	[UpdatedBy] = @UpdatedBy ,
	[UpdateDate] = @UpdateDate ,
	[IsDeleted] = @IsDeleted ,
	[DeletedBy] = @DeletedBy ,
	[DeletDate] = @DeletDate
WHERE
[SalesHeaderID] = @SalesHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@SalesHeaderID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'SALSalesHeader' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_Delete]
@SalesHeaderID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[SALSalesHeader]
WHERE
[SalesHeaderID] = @SalesHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'SALSalesHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[SALSalesHeader] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@SalesHeaderID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectByPrimaryKey]
@SalesHeaderID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate]
FROM	[dbo].[SALSalesHeader]
WHERE
	[SalesHeaderID] = @SalesHeaderID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate]
			FROM	[dbo].[SALSalesHeader]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'SALSalesHeader'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_SALSalesHeader_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[SALSalesHeader]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate]
			FROM [dbo].[SALSalesHeader] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate]
			FROM [dbo].[SALSalesHeader] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'SALSalesHeader' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[SALSalesHeader] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[SALSalesHeader] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[SALSalesHeader]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllByForeignKeySellerID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeySellerID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllByForeignKeySellerID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@UserID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeySellerID]
@UserID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate]
FROM	[dbo].[SALSalesHeader]
WHERE
	[SellerID] = @UserID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyCustomerID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyCustomerID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllByForeignKeyCustomerID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@CustomerID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyCustomerID]
@CustomerID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate]
FROM	[dbo].[SALSalesHeader]
WHERE
	[CustomerID] = @CustomerID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyRefuseReasonID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyRefuseReasonID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllByForeignKeyRefuseReasonID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@RefuseReasonID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyRefuseReasonID]
@RefuseReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate]
FROM	[dbo].[SALSalesHeader]
WHERE
	[RefuseReasonID] = @RefuseReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyTaxTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyTaxTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllByForeignKeyTaxTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@TaxTypeID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyTaxTypeID]
@TaxTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate]
FROM	[dbo].[SALSalesHeader]
WHERE
	[TaxTypeID] = @TaxTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyPaymentTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyPaymentTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllByForeignKeyPaymentTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@PaymentTypeID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyPaymentTypeID]
@PaymentTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate]
FROM	[dbo].[SALSalesHeader]
WHERE
	[PaymentTypeID] = @PaymentTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllByForeignKeySellerIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeySellerIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllByForeignKeySellerIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	:
		@UserID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeySellerIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@UserID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[SALSalesHeader]
			WHERE [SellerID] = @UserID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyCustomerIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyCustomerIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllByForeignKeyCustomerIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	:
		@CustomerID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyCustomerIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@CustomerID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[SALSalesHeader]
			WHERE [CustomerID] = @CustomerID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyRefuseReasonIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyRefuseReasonIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllByForeignKeyRefuseReasonIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	:
		@RefuseReasonID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyRefuseReasonIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@RefuseReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[SALSalesHeader]
			WHERE [RefuseReasonID] = @RefuseReasonID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyTaxTypeIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyTaxTypeIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllByForeignKeyTaxTypeIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	:
		@TaxTypeID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyTaxTypeIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@TaxTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[SALSalesHeader]
			WHERE [TaxTypeID] = @TaxTypeID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyPaymentTypeIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyPaymentTypeIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_SelectAllByForeignKeyPaymentTypeIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	:
		@PaymentTypeID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_SelectAllByForeignKeyPaymentTypeIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@PaymentTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[SalesHeaderID],[SalesDate],[CustomerID],[InvoiceNumber],[InvoiceDate],[SellerID],[PaymentTypeID],[TotalPrice],[PaidAmount],[RemainingAmount],[LastDayToPay],[TotalDiscountAmount],[TotalDiscountRatio],[IsClosed],[IsVoid],[IsPrinted],[ServicePrice],[TaxTypeID],[RefuseReasonID],[CreatedBy],[CreateDate],[UpdatedBy],[UpdateDate],[IsDeleted],[DeletedBy],[DeletDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[SALSalesHeader]
			WHERE [PaymentTypeID] = @PaymentTypeID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeySellerID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeySellerID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_DeleteAllByForeignKeySellerID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@UserID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeySellerID]
@UserID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[SALSalesHeader]
WHERE
	[SellerID] = @UserID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyCustomerID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyCustomerID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_DeleteAllByForeignKeyCustomerID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@CustomerID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyCustomerID]
@CustomerID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[SALSalesHeader]
WHERE
	[CustomerID] = @CustomerID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyRefuseReasonID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyRefuseReasonID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_DeleteAllByForeignKeyRefuseReasonID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@RefuseReasonID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyRefuseReasonID]
@RefuseReasonID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[SALSalesHeader]
WHERE
	[RefuseReasonID] = @RefuseReasonID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyTaxTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyTaxTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_DeleteAllByForeignKeyTaxTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@TaxTypeID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyTaxTypeID]
@TaxTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[SALSalesHeader]
WHERE
	[TaxTypeID] = @TaxTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyPaymentTypeID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyPaymentTypeID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_SALSalesHeader_DeleteAllByForeignKeyPaymentTypeID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:48 AM

INPUTS	: 
		@PaymentTypeID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'SALSalesHeader' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_SALSalesHeader_DeleteAllByForeignKeyPaymentTypeID]
@PaymentTypeID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[SALSalesHeader]
WHERE
	[PaymentTypeID] = @PaymentTypeID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- PURPurchaseReturnLine.sql
-- 
-- history:   12/26/2014 2:45:49 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Qty float  
		@Reason text = null  
		@OriginalpurchaseLineID int = null  
		@BatchID int  
		@BatchNumber varchar (50) = null  
		@ExpiryDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseReturnLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_Insert_WithDefaultValues]
@Qty float , 
@Reason text = null , 
@OriginalpurchaseLineID int = null , 
@BatchID int , 
@BatchNumber varchar (50) = null , 
@ExpiryDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='PURPurchaseReturnLine'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @Qty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Qty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Qty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Reason is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Reason')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Reason =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OriginalpurchaseLineID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OriginalpurchaseLineID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OriginalpurchaseLineID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchNumber is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchNumber')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchNumber =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ExpiryDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ExpiryDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ExpiryDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[PURPurchaseReturnLine]( [Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate] )
          VALUES ( @Qty,@Reason,@OriginalpurchaseLineID,@BatchID,@BatchNumber,@ExpiryDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_PURPurchaseReturnLine_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseReturnLineID int = null  
		@Qty float = null  
		@Reason text = null  
		@OriginalpurchaseLineID int = null  
		@BatchID int = null  
		@BatchNumber varchar (50) = null  
		@ExpiryDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseReturnLine' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_Insert_WithDefaultValues_AndReturn]
@PurchaseReturnLineID int = null , 
@Qty float = null , 
@Reason text = null , 
@OriginalpurchaseLineID int = null , 
@BatchID int = null , 
@BatchNumber varchar (50) = null , 
@ExpiryDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='PURPurchaseReturnLine'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @Qty is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Qty')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Qty =  convert ( float,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Reason is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Reason')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Reason =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @OriginalpurchaseLineID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='OriginalpurchaseLineID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @OriginalpurchaseLineID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchNumber is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchNumber')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchNumber =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ExpiryDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ExpiryDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ExpiryDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[PURPurchaseReturnLine]( [Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate] )
OUTPUT Inserted.*
VALUES (   @Qty,@Reason,@OriginalpurchaseLineID,@BatchID,@BatchNumber,@ExpiryDate  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Qty float  
		@Reason text = null  
		@OriginalpurchaseLineID int = null  
		@BatchID int  
		@BatchNumber varchar (50) = null  
		@ExpiryDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseReturnLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_Insert]
@Qty float , 
@Reason text = null , 
@OriginalpurchaseLineID int = null , 
@BatchID int , 
@BatchNumber varchar (50) = null , 
@ExpiryDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[PURPurchaseReturnLine]( [Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate] )
          VALUES ( @Qty,@Reason,@OriginalpurchaseLineID,@BatchID,@BatchNumber,@ExpiryDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseReturnLineID int  
		@Qty float  
		@Reason text = null  
		@OriginalpurchaseLineID int = null  
		@BatchID int  
		@BatchNumber varchar (50) = null  
		@ExpiryDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'PURPurchaseReturnLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_Update]
@PurchaseReturnLineID int , 
@Qty float , 
@Reason text = null , 
@OriginalpurchaseLineID int = null , 
@BatchID int , 
@BatchNumber varchar (50) = null , 
@ExpiryDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[PURPurchaseReturnLine]
SET
	[Qty] = @Qty ,
	[Reason] = @Reason ,
	[OriginalpurchaseLineID] = @OriginalpurchaseLineID ,
	[BatchID] = @BatchID ,
	[BatchNumber] = @BatchNumber ,
	[ExpiryDate] = @ExpiryDate
WHERE
[PurchaseReturnLineID] = @PurchaseReturnLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseReturnLineID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'PURPurchaseReturnLine' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_Delete]
@PurchaseReturnLineID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[PURPurchaseReturnLine]
WHERE
[PurchaseReturnLineID] = @PurchaseReturnLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'PURPurchaseReturnLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[PURPurchaseReturnLine] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseReturnLineID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_SelectByPrimaryKey]
@PurchaseReturnLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate]
FROM	[dbo].[PURPurchaseReturnLine]
WHERE
	[PurchaseReturnLineID] = @PurchaseReturnLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'PURPurchaseReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate]
			FROM	[dbo].[PURPurchaseReturnLine]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'PURPurchaseReturnLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_PURPurchaseReturnLine_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[PURPurchaseReturnLine]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'PURPurchaseReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate]
			FROM [dbo].[PURPurchaseReturnLine] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate]
			FROM [dbo].[PURPurchaseReturnLine] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'PURPurchaseReturnLine' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[PURPurchaseReturnLine] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[PURPurchaseReturnLine] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'PURPurchaseReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[PURPurchaseReturnLine]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyPurchaseReturnLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyPurchaseReturnLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_SelectAllByForeignKeyPurchaseReturnLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@BatchID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyPurchaseReturnLineID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate]
FROM	[dbo].[PURPurchaseReturnLine]
WHERE
	[PurchaseReturnLineID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyOriginalpurchaseLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyOriginalpurchaseLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_SelectAllByForeignKeyOriginalpurchaseLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyOriginalpurchaseLineID]
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate]
FROM	[dbo].[PURPurchaseReturnLine]
WHERE
	[OriginalpurchaseLineID] = @PurchaseLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyPurchaseReturnLineIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyPurchaseReturnLineIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_SelectAllByForeignKeyPurchaseReturnLineIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	:
		@BatchID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyPurchaseReturnLineIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseReturnLine]
			WHERE [PurchaseReturnLineID] = @BatchID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyOriginalpurchaseLineIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyOriginalpurchaseLineIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_SelectAllByForeignKeyOriginalpurchaseLineIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	:
		@PurchaseLineID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_SelectAllByForeignKeyOriginalpurchaseLineIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurchaseReturnLineID],[Qty],[Reason],[OriginalpurchaseLineID],[BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseReturnLine]
			WHERE [OriginalpurchaseLineID] = @PurchaseLineID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_DeleteAllByForeignKeyPurchaseReturnLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_DeleteAllByForeignKeyPurchaseReturnLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_DeleteAllByForeignKeyPurchaseReturnLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@BatchID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_DeleteAllByForeignKeyPurchaseReturnLineID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseReturnLine]
WHERE
	[PurchaseReturnLineID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseReturnLine_DeleteAllByForeignKeyOriginalpurchaseLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseReturnLine_DeleteAllByForeignKeyOriginalpurchaseLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseReturnLine_DeleteAllByForeignKeyOriginalpurchaseLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseReturnLine' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseReturnLine_DeleteAllByForeignKeyOriginalpurchaseLineID]
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseReturnLine]
WHERE
	[OriginalpurchaseLineID] = @PurchaseLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- PURPurchaseLineBatch.sql
-- 
-- history:   12/26/2014 2:45:49 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineID int  
		@BatchID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_Insert_WithDefaultValues]
@PurchaseLineID int , 
@BatchID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='PURPurchaseLineBatch'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @PurchaseLineID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PurchaseLineID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PurchaseLineID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[PURPurchaseLineBatch]( [PurchaseLineID],[BatchID] )
          VALUES ( @PurchaseLineID,@BatchID )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_PURPurchaseLineBatch_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineBatchID int = null  
		@PurchaseLineID int = null  
		@BatchID int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseLineBatch' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_Insert_WithDefaultValues_AndReturn]
@PurchaseLineBatchID int = null , 
@PurchaseLineID int = null , 
@BatchID int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='PURPurchaseLineBatch'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @PurchaseLineID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='PurchaseLineID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @PurchaseLineID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[PURPurchaseLineBatch]( [PurchaseLineID],[BatchID] )
OUTPUT Inserted.*
VALUES (   @PurchaseLineID,@BatchID  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineID int  
		@BatchID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'PURPurchaseLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_Insert]
@PurchaseLineID int , 
@BatchID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[PURPurchaseLineBatch]( [PurchaseLineID],[BatchID] )
          VALUES ( @PurchaseLineID,@BatchID )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineBatchID int  
		@PurchaseLineID int  
		@BatchID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'PURPurchaseLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_Update]
@PurchaseLineBatchID int , 
@PurchaseLineID int , 
@BatchID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[PURPurchaseLineBatch]
SET
	[PurchaseLineID] = @PurchaseLineID ,
	[BatchID] = @BatchID
WHERE
[PurchaseLineBatchID] = @PurchaseLineBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineBatchID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'PURPurchaseLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_Delete]
@PurchaseLineBatchID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[PURPurchaseLineBatch]
WHERE
[PurchaseLineBatchID] = @PurchaseLineBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'PURPurchaseLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[PURPurchaseLineBatch] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineBatchID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_SelectByPrimaryKey]
@PurchaseLineBatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseLineBatchID],[PurchaseLineID],[BatchID]
FROM	[dbo].[PURPurchaseLineBatch]
WHERE
	[PurchaseLineBatchID] = @PurchaseLineBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'PURPurchaseLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[PurchaseLineBatchID],[PurchaseLineID],[BatchID]
			FROM	[dbo].[PURPurchaseLineBatch]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'PURPurchaseLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_PURPurchaseLineBatch_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[PurchaseLineBatchID],[PurchaseLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[PURPurchaseLineBatch]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'PURPurchaseLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [PurchaseLineBatchID],[PurchaseLineID],[BatchID]
			FROM [dbo].[PURPurchaseLineBatch] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [PurchaseLineBatchID],[PurchaseLineID],[BatchID]
			FROM [dbo].[PURPurchaseLineBatch] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'PURPurchaseLineBatch' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [PurchaseLineBatchID],[PurchaseLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[PURPurchaseLineBatch] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [PurchaseLineBatchID],[PurchaseLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[PURPurchaseLineBatch] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'PURPurchaseLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[PURPurchaseLineBatch]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_SelectAllByForeignKeyBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@BatchID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseLineBatchID],[PurchaseLineID],[BatchID]
FROM	[dbo].[PURPurchaseLineBatch]
WHERE
	[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyPurchaseLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyPurchaseLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_SelectAllByForeignKeyPurchaseLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyPurchaseLineID]
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[PurchaseLineBatchID],[PurchaseLineID],[BatchID]
FROM	[dbo].[PURPurchaseLineBatch]
WHERE
	[PurchaseLineID] = @PurchaseLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyBatchIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyBatchIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_SelectAllByForeignKeyBatchIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	:
		@BatchID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyBatchIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurchaseLineBatchID],[PurchaseLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseLineBatch]
			WHERE [BatchID] = @BatchID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyPurchaseLineIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyPurchaseLineIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_SelectAllByForeignKeyPurchaseLineIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	:
		@PurchaseLineID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_SelectAllByForeignKeyPurchaseLineIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[PurchaseLineBatchID],[PurchaseLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[PURPurchaseLineBatch]
			WHERE [PurchaseLineID] = @PurchaseLineID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_DeleteAllByForeignKeyBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_DeleteAllByForeignKeyBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_DeleteAllByForeignKeyBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@BatchID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_DeleteAllByForeignKeyBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseLineBatch]
WHERE
	[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_PURPurchaseLineBatch_DeleteAllByForeignKeyPurchaseLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_PURPurchaseLineBatch_DeleteAllByForeignKeyPurchaseLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_PURPurchaseLineBatch_DeleteAllByForeignKeyPurchaseLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'PURPurchaseLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_PURPurchaseLineBatch_DeleteAllByForeignKeyPurchaseLineID]
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[PURPurchaseLineBatch]
WHERE
	[PurchaseLineID] = @PurchaseLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- INVTakingInventoryLineBatch.sql
-- 
-- history:   12/26/2014 2:45:49 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@TakingLineID int  
		@BatchID int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTakingInventoryLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_Insert_WithDefaultValues]
@TakingLineID int , 
@BatchID int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVTakingInventoryLineBatch'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @TakingLineID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TakingLineID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TakingLineID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVTakingInventoryLineBatch]( [TakingLineID],[BatchID] )
          VALUES ( @TakingLineID,@BatchID )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVTakingInventoryLineBatch_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@TakingLineBatchID int = null  
		@TakingLineID int = null  
		@BatchID int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTakingInventoryLineBatch' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_Insert_WithDefaultValues_AndReturn]
@TakingLineBatchID int = null , 
@TakingLineID int = null , 
@BatchID int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVTakingInventoryLineBatch'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @TakingLineID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='TakingLineID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @TakingLineID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @BatchID is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchID')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchID =  convert ( int,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVTakingInventoryLineBatch]( [TakingLineID],[BatchID] )
OUTPUT Inserted.*
VALUES (   @TakingLineID,@BatchID  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@TakingLineID int  
		@BatchID int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVTakingInventoryLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_Insert]
@TakingLineID int , 
@BatchID int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVTakingInventoryLineBatch]( [TakingLineID],[BatchID] )
          VALUES ( @TakingLineID,@BatchID )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@TakingLineBatchID int  
		@TakingLineID int  
		@BatchID int = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVTakingInventoryLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_Update]
@TakingLineBatchID int , 
@TakingLineID int , 
@BatchID int = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVTakingInventoryLineBatch]
SET
	[TakingLineID] = @TakingLineID ,
	[BatchID] = @BatchID
WHERE
[TakingLineBatchID] = @TakingLineBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@TakingLineBatchID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVTakingInventoryLineBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_Delete]
@TakingLineBatchID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVTakingInventoryLineBatch]
WHERE
[TakingLineBatchID] = @TakingLineBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVTakingInventoryLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVTakingInventoryLineBatch] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@TakingLineBatchID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVTakingInventoryLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_SelectByPrimaryKey]
@TakingLineBatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[TakingLineBatchID],[TakingLineID],[BatchID]
FROM	[dbo].[INVTakingInventoryLineBatch]
WHERE
	[TakingLineBatchID] = @TakingLineBatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVTakingInventoryLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[TakingLineBatchID],[TakingLineID],[BatchID]
			FROM	[dbo].[INVTakingInventoryLineBatch]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVTakingInventoryLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVTakingInventoryLineBatch_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[TakingLineBatchID],[TakingLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVTakingInventoryLineBatch]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVTakingInventoryLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [TakingLineBatchID],[TakingLineID],[BatchID]
			FROM [dbo].[INVTakingInventoryLineBatch] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [TakingLineBatchID],[TakingLineID],[BatchID]
			FROM [dbo].[INVTakingInventoryLineBatch] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVTakingInventoryLineBatch' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [TakingLineBatchID],[TakingLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVTakingInventoryLineBatch] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [TakingLineBatchID],[TakingLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVTakingInventoryLineBatch] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVTakingInventoryLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVTakingInventoryLineBatch]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_SelectAllByForeignKeyTakingLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_SelectAllByForeignKeyTakingLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_SelectAllByForeignKeyTakingLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVTakingInventoryLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_SelectAllByForeignKeyTakingLineID]
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[TakingLineBatchID],[TakingLineID],[BatchID]
FROM	[dbo].[INVTakingInventoryLineBatch]
WHERE
	[TakingLineID] = @PurchaseLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_SelectAllByForeignKeyTakingLineIDPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_SelectAllByForeignKeyTakingLineIDPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_SelectAllByForeignKeyTakingLineIDPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	:
		@PurchaseLineID int 
		
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVTakingInventoryLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_SelectAllByForeignKeyTakingLineIDPaged]
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table

if(@PageSize IS NOT NULL AND @PageSize <> '')
	SELECT TOP (@PageSize) *
	FROM (SELECT	[TakingLineBatchID],[TakingLineID],[BatchID], ROW_NUMBER() OVER(ORDER BY @OrderByStatement) AS SortRow 
			FROM	[dbo].[INVTakingInventoryLineBatch]
			WHERE [TakingLineID] = @PurchaseLineID) AS query 
	WHERE query.SortRow > @SkipPages * @PageSize

 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVTakingInventoryLineBatch_DeleteAllByForeignKeyTakingLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVTakingInventoryLineBatch_DeleteAllByForeignKeyTakingLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVTakingInventoryLineBatch_DeleteAllByForeignKeyTakingLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:49 AM

INPUTS	: 
		@PurchaseLineID int 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVTakingInventoryLineBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVTakingInventoryLineBatch_DeleteAllByForeignKeyTakingLineID]
@PurchaseLineID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
delete	
FROM	[dbo].[INVTakingInventoryLineBatch]
WHERE
	[TakingLineID] = @PurchaseLineID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				




-- Developer's comment header
-- INVInventory.sql
-- 
-- history:   12/26/2014 2:45:50 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@InventoryName varchar (255)  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVInventory' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_Insert_WithDefaultValues]
@InventoryName varchar (255) , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVInventory'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @InventoryName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='InventoryName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @InventoryName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Notes is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Notes')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Notes =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVInventory]( [InventoryName],[Notes] )
          VALUES ( @InventoryName,@Notes )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVInventory_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@InventoryID int = null  
		@InventoryName varchar (255) = null  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVInventory' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_Insert_WithDefaultValues_AndReturn]
@InventoryID int = null , 
@InventoryName varchar (255) = null , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVInventory'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @InventoryName is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='InventoryName')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @InventoryName =  convert ( varchar (255),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @Notes is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='Notes')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @Notes =  convert ( text,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVInventory]( [InventoryName],[Notes] )
OUTPUT Inserted.*
VALUES (   @InventoryName,@Notes  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@InventoryName varchar (255)  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVInventory' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_Insert]
@InventoryName varchar (255) , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVInventory]( [InventoryName],[Notes] )
          VALUES ( @InventoryName,@Notes )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@InventoryID int  
		@InventoryName varchar (255)  
		@Notes text = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVInventory' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_Update]
@InventoryID int , 
@InventoryName varchar (255) , 
@Notes text = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVInventory]
SET
	[InventoryName] = @InventoryName ,
	[Notes] = @Notes
WHERE
[InventoryID] = @InventoryID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@InventoryID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVInventory' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_Delete]
@InventoryID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVInventory]
WHERE
[InventoryID] = @InventoryID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVInventory'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVInventory] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@InventoryID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVInventory' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_SelectByPrimaryKey]
@InventoryID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[InventoryID],[InventoryName],[Notes]
FROM	[dbo].[INVInventory]
WHERE
	[InventoryID] = @InventoryID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVInventory' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[InventoryID],[InventoryName],[Notes]
			FROM	[dbo].[INVInventory]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVInventory'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVInventory_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[InventoryID],[InventoryName],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVInventory]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVInventory' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [InventoryID],[InventoryName],[Notes]
			FROM [dbo].[INVInventory] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [InventoryID],[InventoryName],[Notes]
			FROM [dbo].[INVInventory] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVInventory' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [InventoryID],[InventoryName],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVInventory] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [InventoryID],[InventoryName],[Notes], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVInventory] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVInventory_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVInventory_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVInventory_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVInventory' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVInventory_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVInventory]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				






-- Developer's comment header
-- INVBatch.sql
-- 
-- history:   12/26/2014 2:45:50 AM
--
--

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_Insert_WithDefaultValues]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_Insert_WithDefaultValues]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchNumber varchar (50)  
		@ExpiryDate datetime  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_Insert_WithDefaultValues]
@BatchNumber varchar (50) , 
@ExpiryDate datetime , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS (nolock) where table_Name ='INVBatch'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   
          declare @___s nvarchar(4000)

          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @BatchNumber is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchNumber')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchNumber =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ExpiryDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ExpiryDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ExpiryDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          
          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVBatch]( [BatchNumber],[ExpiryDate] )
          VALUES ( @BatchNumber,@ExpiryDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_Insert_WithDefaultValues_AndReturn]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_Insert_WithDefaultValues_AndReturn]
GO


/*

OBJECT NAME : gsp_INVBatch_Insert_WithDefaultValues_AndReturn
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchID int = null  
		@BatchNumber varchar (50) = null  
		@ExpiryDate datetime = null  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVBatch' and return back the entire row
(with the default values inserted)

*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_Insert_WithDefaultValues_AndReturn]
@BatchID int = null , 
@BatchNumber varchar (50) = null , 
@ExpiryDate datetime = null , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

         
          -- create Table variable for columns default
          declare @____TEMP____TABLE___ table
          (
 	          column_name nvarchar(128),
 	          column_def nvarchar(4000)
          )
          insert into @____TEMP____TABLE___ SELECT column_name,column_default
          FROM INFORMATION_SCHEMA.COLUMNS   (nolock) where table_Name ='INVBatch'
      
          --prepare temporary variable to iterate over default values.
          declare @___t nvarchar(4000)   


          --variables for substring calculation to remove starting and ending parentheses is exist
          declare @__i bigint
          declare @__j bigint
          declare @__len bigint
          
          declare @____temp_execution_result___ table /*temp table*/
          (result nvarchar (4000))

          ---declare this once in every insertion stored procedure
          declare @___GUIDTable Table
          (
          [Key] [uniqueidentifier] NOT NULL DEFAULT (newsequentialid())
          )
          
          --test if the passes parameter is null to get its default
          if @BatchNumber is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='BatchNumber')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @BatchNumber =  convert ( varchar (50),(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
          --test if the passes parameter is null to get its default
          if @ExpiryDate is null
          begin
            set @___t=(select column_def from @____TEMP____TABLE___ where column_name='ExpiryDate')
            --trim default value from leading and ending parentheses.
            set @__i=charindex ('(',@___t);
            set @__len = len (@___t)
            set @__j = charindex (')',@___t,@__len);

            if @__i= 1 AND @__j =@__len
            begin
              set @___t=substring( @___t,2,@__len-2);
            end
            
          
            set @___t = 'select '+@___t      
            -- execute the default value expression
            insert into @____temp_execution_result___ execute sp_executesql @___t
            set @ExpiryDate =  convert ( datetime,(select result from @____temp_execution_result___));
            
            --clears temp table data to be ready for next insertion (for other procedure params)
            delete  from @____temp_execution_result___ 
               

          end        
            


          /* INSERT a new row in the table*/

              
INSERT INTO [dbo].[INVBatch]( [BatchNumber],[ExpiryDate] )
OUTPUT Inserted.*
VALUES (   @BatchNumber,@ExpiryDate  ) ; 






/* Get the Error Code for the statment just executed*/
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_Insert]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_Insert
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchNumber varchar (50)  
		@ExpiryDate datetime  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will insert 1 row in the table 'INVBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_Insert]
@BatchNumber varchar (50) , 
@ExpiryDate datetime , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON


          -- INSERT a new row in the table
          INSERT INTO [dbo].[INVBatch]( [BatchNumber],[ExpiryDate] )
          VALUES ( @BatchNumber,@ExpiryDate )


          -- Get the Error Code for the statment just executed
          SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_Update]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_Update
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchID int  
		@BatchNumber varchar (50)  
		@ExpiryDate datetime  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will update 1 row in the table 'INVBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_Update]
@BatchID int , 
@BatchNumber varchar (50) , 
@ExpiryDate datetime , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- UPDATE a row in the table
UPDATE [dbo].[INVBatch]
SET
	[BatchNumber] = @BatchNumber ,
	[ExpiryDate] = @ExpiryDate
WHERE
[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_Delete]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_Delete
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchID int  

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete 1 row from the table 'INVBatch' 

----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_Delete]
@BatchID int , 
@dlgErrorCode int OUTPUT

AS

SET NOCOUNT ON

-- DELETE a row from the table
DELETE FROM [dbo].[INVBatch]
WHERE
[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_DeleteByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_DeleteByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_DeleteByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will delete row(s) from the table 'INVBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_DeleteByField]
@Field varchar(100),
@Value varchar(1000),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- DELETE row(s) from the table
DECLARE @query varchar(2000)

SET @query = 'DELETE FROM [dbo].[INVBatch] WHERE [' + @Field + '] = ''' + @Value + ''''
EXEC(@query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectByPrimaryKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectByPrimaryKey]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectByPrimaryKey
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectByPrimaryKey]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the table
SELECT	[BatchID],[BatchNumber],[ExpiryDate]
FROM	[dbo].[INVBatch]
WHERE
	[BatchID] = @BatchID


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectAll]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectAll
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows from the table 'INVBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectAll]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
declare @Query nvarchar(max);
set @Query='SELECT	[BatchID],[BatchNumber],[ExpiryDate]
			FROM	[dbo].[INVBatch]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectAllPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectAllPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectAllPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table 'INVBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectAllPaged]
@PageSize int=null,
@SkipPages int=null,
@OrderByStatement varchar(100)=null,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) from the table
DECLARE @Query nvarchar(max);

if(@PageSize is null or @PageSize='' or @SkipPages is null or @SkipPages='' or @OrderByStatement is null or @OrderByStatement='')
begin
Exec gsp_INVBatch_SelectAll @dlgErrorCode=@dlgErrorCode
end
else
begin
SET @Query='SELECT	[BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow 
			FROM	[dbo].[INVBatch]'

if(@PageSize is not null and @PageSize<>'')
	SET @Query='SELECT TOP ' + CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)
end
 EXEC (@Query)
  
 SELECT @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectByField]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectByField]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectByField
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select row(s) from the table 'INVBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectByField]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query varchar(2000)

if @Value2 is not null and @Value2 <> ''
SET @Query = 'SELECT [BatchID],[BatchNumber],[ExpiryDate]
			FROM [dbo].[INVBatch] WHERE [' +replace(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' And '''+ @Value2+''''
else
SET @Query = 'SELECT [BatchID],[BatchNumber],[ExpiryDate]
			FROM [dbo].[INVBatch] WHERE [' +replace(@Field,']',']]') + ']'+@Operation+ '''' + @Value + ''''

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectByFieldPaged]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectByFieldPaged]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectByFieldPaged
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@Field varchar(100)
		@Value varchar(1000)
		@Value2 varchar(1000)
		@Operation varchar(10)
		@PageSize int
		@SkipPages int
		@OrderByStatement varchar(100)

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select the specified number of entries from the specified record number in the table'INVBatch' 
				using the value of the field specified
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectByFieldPaged]
@Field varchar(100),
@Value varchar(1000),
@Value2 varchar(1000)='',
@Operation varchar(10),
@PageSize int,
@SkipPages int,
@OrderByStatement varchar(100),
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT row(s) from the table
DECLARE @Query nvarchar(max);

IF @Value2 IS NOT NULL AND @Value2 <> ''
	SET @Query = 'SELECT [BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement+']) AS SortRow
			FROM [dbo].[INVBatch] WHERE [' + REPLACE(@Field,']',']]') + '] BETWEEN  ''' + @Value + ''' AND '''+ @Value2+''''
ELSE
	SET @Query = 'SELECT [BatchID],[BatchNumber],[ExpiryDate], ROW_NUMBER() OVER(ORDER BY ['+ @OrderByStatement + ']) AS SortRow
			FROM [dbo].[INVBatch] WHERE [' + REPLACE(@Field,']',']]') + ']' + @Operation + '''' + @Value + ''''

IF(@PageSize IS NOT NULL AND @PageSize<>'')
	set @Query='SELECT TOP '+ CONVERT(varchar(max), @PageSize) + ' * FROM (' + @Query + ') AS query 
	WHERE query.SortRow > ' + CONVERT(varchar(max), @SkipPages * @PageSize)

EXEC(@Query)


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectAllCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectAllCount]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectAllCount
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select all rows count from the table 'INVBatch' 
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectAllCount]
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT all row(s) count from the table
declare @Query nvarchar(max);
set @Query='SELECT	Count(*)
			FROM	[dbo].[INVBatch]'

 exec (@Query)
  
 select @dlgErrorCode = @@ERROR


-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectOneWithINVAdjustStockUsingBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectOneWithINVAdjustStockUsingBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectOneWithINVAdjustStockUsingBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVBatch' and also the respective child records from 'INVAdjustStock'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectOneWithINVAdjustStockUsingBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_INVBatch_SelectByPrimaryKey @BatchID = @BatchID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_INVAdjustStock_SelectAllByForeignKeyBatchID  @BatchID = @BatchID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectOneWithINVProductStockBatchUsingBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectOneWithINVProductStockBatchUsingBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectOneWithINVProductStockBatchUsingBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVBatch' and also the respective child records from 'INVProductStockBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectOneWithINVProductStockBatchUsingBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_INVBatch_SelectByPrimaryKey @BatchID = @BatchID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_INVProductStockBatch_SelectAllByForeignKeyBatchID  @BatchID = @BatchID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectOneWithPURPurchaseLineBatchUsingBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectOneWithPURPurchaseLineBatchUsingBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectOneWithPURPurchaseLineBatchUsingBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVBatch' and also the respective child records from 'PURPurchaseLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectOneWithPURPurchaseLineBatchUsingBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_INVBatch_SelectByPrimaryKey @BatchID = @BatchID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseLineBatch_SelectAllByForeignKeyBatchID  @BatchID = @BatchID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectOneWithPURPurchaseReturnLineUsingPurchaseReturnLineID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectOneWithPURPurchaseReturnLineUsingPurchaseReturnLineID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectOneWithPURPurchaseReturnLineUsingPurchaseReturnLineID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVBatch' and also the respective child records from 'PURPurchaseReturnLine'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectOneWithPURPurchaseReturnLineUsingPurchaseReturnLineID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_INVBatch_SelectByPrimaryKey @BatchID = @BatchID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_PURPurchaseReturnLine_SelectAllByForeignKeyPurchaseReturnLineID  @BatchID = @BatchID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[gsp_INVBatch_SelectOneWithSALSalesLineBatchUsingBatchID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[gsp_INVBatch_SelectOneWithSALSalesLineBatchUsingBatchID]
GO


/*
---------------------------------------------------------------------------------------------------
OBJECT NAME : gsp_INVBatch_SelectOneWithSALSalesLineBatchUsingBatchID
						
AUTHOR	:	Ignyte Software ©
DATE	:	12/26/2014 2:45:50 AM

INPUTS	: 
		@BatchID int 

OUTPUTS	: 
		@Error     - The return code indicating if there was an error

DESCRIPTION : This stored procedure will select a row from the table 'INVBatch' and also the respective child records from 'SALSalesLineBatch'
----------------------------------------------------------------------------------------------------
*/
CREATE PROCEDURE [dbo].[gsp_INVBatch_SelectOneWithSALSalesLineBatchUsingBatchID]
@BatchID int ,
@dlgErrorCode int OUTPUT
AS

SET NOCOUNT ON

-- SELECT a row from the main table
EXEC gsp_INVBatch_SelectByPrimaryKey @BatchID = @BatchID ,@dlgErrorCode=@dlgErrorCode
EXEC gsp_SALSalesLineBatch_SelectAllByForeignKeyBatchID  @BatchID = @BatchID, @dlgErrorCode=@dlgErrorCode

-- Get the Error Code for the statment just executed
SET @dlgErrorCode = @@ERROR


GO
				





